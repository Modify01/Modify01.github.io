<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>要么庸俗要么孤独</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-06-23T11:44:29.134Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>wyx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue(数据绑定)</title>
    <link href="http://yoursite.com/2017/06/23/vue%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/"/>
    <id>http://yoursite.com/2017/06/23/vue数据绑定/</id>
    <published>2017-06-23T05:17:02.000Z</published>
    <updated>2017-06-23T11:44:29.134Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h1 id="正文开始"><a href="#正文开始" class="headerlink" title="正文开始"></a>正文开始</h1><p><center style="font-size: 30px"><code>Vue数据绑定</code></center></p>
<hr>
<h1 id="Vue入门之数据绑定"><a href="#Vue入门之数据绑定" class="headerlink" title="Vue入门之数据绑定"></a>Vue入门之数据绑定</h1><h2 id="什么是双向绑定？"><a href="#什么是双向绑定？" class="headerlink" title="什么是双向绑定？"></a>什么是双向绑定？</h2><p>Vue框架很核心的功能就是双向的数据绑定。<br>双向是指：HTML标签数据 绑定到 Vue对象，另外反方向数据也是绑定的。通俗点说就是，Vue对象的改变会直接影响到HTML的标签的变化，而且标签的变化也会反过来影响Vue对象的属性的变化。<br>这样以来，就彻底变革了之前Dom的开发方式，之前Dom驱动的开发方式尤其是以jQuery为主的开发时代，都是dom变化后，触发js事件，然后在事件中通过js代码取得标签的变化，再跟后台进行交互，然后根据后台返回的结果再更新HTML标签，异常的繁琐。有了Vue这种双向绑定，让开发人员只需要关心json数据的变化即可，Vue自动映射到HTML上，而且HTML的变化也会映射回js对象上，开发方式直接变革成了前端由数据驱动的<br>开发时代，远远抛弃了Dom开发主导的时代了。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://orzuutv5f.bkt.clouddn.com/02vue%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A.jpg" alt="vue 双向绑定" title="">
                </div>
                <div class="image-caption">vue 双向绑定</div>
            </figure>
<h2 id="Vue绑定文本"><a href="#Vue绑定文本" class="headerlink" title="Vue绑定文本"></a>Vue绑定文本</h2><p>数据绑定最常见的形式就是使用 “Mustache” 语法（双大括号）的文本插值，比如模板引擎：handlebars中就是用的&#123;&#123;  &#125;&#125;.<br>创建的Vue对象中的data属性就是用来绑定数据到HTML的。参考如下代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Message: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;         <span class="comment">// 创建Vue对象。Vue的核心对象。</span></div><div class="line">    el: <span class="string">'#app'</span>,               <span class="comment">// el属性：把当前Vue对象挂载到 div标签上，#app是id选择器</span></div><div class="line">    data: &#123;                   <span class="comment">// data: 是Vue对象中绑定的数据</span></div><div class="line">      msg: <span class="string">'Hello Vue!'</span>   <span class="comment">// message 自定义的数据</span></div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="绑定数据中使用JavaScript表达式"><a href="#绑定数据中使用JavaScript表达式" class="headerlink" title="绑定数据中使用JavaScript表达式"></a>绑定数据中使用JavaScript表达式</h2><p>对于所有的数据绑定， Vue.js 都提供了完全的 JavaScript 表达式支持。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Message: &#123;&#123; msg + ' - ' + name &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;         <span class="comment">// 创建Vue对象。Vue的核心对象。</span></div><div class="line">    el: <span class="string">'#app'</span>,               <span class="comment">// el属性：把当前Vue对象挂载到 div标签上，#app是id选择器</span></div><div class="line">    data: &#123;                   <span class="comment">// data: 是Vue对象中绑定的数据</span></div><div class="line">      msg: <span class="string">'Hi'</span>,              <span class="comment">// message 自定义的数据</span></div><div class="line">      name: <span class="string">'flydragon'</span>       <span class="comment">// name自定义的属性，vue可以多个自定义属性，属性类型也可是复杂类型</span></div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hi - flydragon</div></pre></td></tr></table></figure></p>
<p>当然Vue还可以支持表达中的任何计算、函数处理等。参考下面的综合点的案例。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue入门之数据绑定-表达式运算<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    &#123;&#123; msg + ' - ' + name &#125;&#125;</div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">      &#123;&#123; isOk ? '123' : '456' &#125;&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我的年龄是： &#123;&#123; age *2 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;         <span class="comment">// 创建Vue对象。Vue的核心对象。</span></div><div class="line">    el: <span class="string">'#app'</span>,               <span class="comment">// el属性：把当前Vue对象挂载到 div标签上，#app是id选择器</span></div><div class="line">    data: &#123;                   <span class="comment">// data: 是Vue对象中绑定的数据</span></div><div class="line">      msg: <span class="string">'Hi'</span>,              <span class="comment">// message 自定义的数据</span></div><div class="line">      name: <span class="string">'flydragon'</span>,</div><div class="line">      <span class="attr">isOk</span>: <span class="literal">true</span>,</div><div class="line">      <span class="attr">age</span>: <span class="number">18</span></div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Vue属性绑定"><a href="#Vue属性绑定" class="headerlink" title="Vue属性绑定"></a>Vue属性绑定</h2><p>Vue中不能直接使用&#123;&#123;expression &#125;&#125; 语法进行绑定html的标签，而是用它特有的v-bind指令（就是一种写法，先按照格式走，具体指令是什么可以后续再了解）。</p>
<p>绑定的语法结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;标签 v-bind:属性名=&quot;要绑定的Vue对象的data里的属性名&quot;&gt;&lt;/标签&gt;</div><div class="line">例如:</div><div class="line">&lt;span v-bind:id=&quot;menuId&quot;&gt;&#123;&#123; menuName &#125;&#125;&lt;/span&gt;</div></pre></td></tr></table></figure></p>
<p>参考如下代码案例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue入门之数据绑定--属性绑定<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">"MenuContaineId"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">v-bind:class</span>=<span class="string">"MenuClass"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">v-bind:class</span>=<span class="string">"MenuClass"</span>&gt;</span>产品<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">v-bind:class</span>=<span class="string">"MenuClass"</span>&gt;</span>服务<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">v-bind:class</span>=<span class="string">"MenuClass"</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">      <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">      <span class="attr">data</span>: &#123;                   <span class="comment">// data: 是Vue对象中绑定的数据</span></div><div class="line">        MenuClass: <span class="string">'top-menu'</span>,</div><div class="line">        <span class="attr">MenuContaineId</span>: <span class="string">'sitemenu'</span></div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="输出纯HTML"><a href="#输出纯HTML" class="headerlink" title="输出纯HTML"></a>输出纯HTML</h2><p>由于Vue对于输出绑定的内容做了提前encode，保障在绑定到页面上显示的时候不至于被xss攻击。但某些场景下，我们确保后台数据是安全的，那么我们就要在网页中显示原生的HTML标签。Vue提供了<code>v-html</code>指令。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">"MenuContaineId"</span> <span class="attr">v-html</span>=<span class="string">"MenuBody"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">    <span class="attr">data</span>: &#123;                   <span class="comment">// data: 是Vue对象中绑定的数据</span></div><div class="line">      MenuContaineId: <span class="string">'menu'</span>,</div><div class="line">      <span class="attr">MenuBody</span>: <span class="string">'&lt;p&gt;这里是菜单的内容&lt;/p&gt;'</span></div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>结果：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"menu"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是菜单的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="样式绑定"><a href="#样式绑定" class="headerlink" title="样式绑定"></a>样式绑定</h2><p>对于普通的属性的绑定，只能用上面的讲的绑定属性的方式。而Vue专门加强了class和style的属性的绑定。可以有复杂的对象绑定、数组绑定样式和类。</p>
<h3 id="绑定样式对象"><a href="#绑定样式对象" class="headerlink" title="绑定样式对象"></a>绑定样式对象</h3><p>经常我们需要对样式进行切换，比如：div的显示和隐藏，某些标签active等。Vue提供的对象绑定样式的方式就很容做这些事情。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">代码：</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123; active: isActive &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">解释：</div><div class="line">当 isActive为 true时， div就会具有了active样式类，如果 isActive为false，那么div就去掉active样式类。</div></pre></td></tr></table></figure></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue入门之绑定样式类<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">  .active &#123;</div><div class="line">    background-color: #ccc;</div><div class="line">  &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">"MenuContaineId"</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123; active: isActive &#125;"</span>&gt;</span></div><div class="line">      绑定颜色类</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">      <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">      <span class="attr">data</span>: &#123;                   <span class="comment">// data: 是Vue对象中绑定的数据</span></div><div class="line">        MenuContaineId: <span class="string">'menu'</span>,</div><div class="line">        <span class="attr">isActive</span>: <span class="literal">true</span></div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="混合普通的HTML标签样式类及绑定样式对象"><a href="#混合普通的HTML标签样式类及绑定样式对象" class="headerlink" title="混合普通的HTML标签样式类及绑定样式对象"></a>混合普通的HTML标签样式类及绑定样式对象</h3><p>v-bind:class 指令可以与普通的 class 属性共存。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"static"</span></span></div><div class="line">     <span class="attr">v-bind:class</span>=<span class="string">"&#123; active: isActive, 'text-danger': hasError &#125;"</span>&gt;</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">    <span class="attr">data</span>: &#123;                   <span class="comment">// data: 是Vue对象中绑定的数据</span></div><div class="line">      isActive: <span class="literal">true</span>,</div><div class="line">      <span class="attr">hasError</span>: <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>结果：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"static active"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="绑定data中的样式对象"><a href="#绑定data中的样式对象" class="headerlink" title="绑定data中的样式对象"></a>绑定data中的样式对象</h3><p>直接在html属性中的双引号内写对象，还是很不爽，也没有智能提示，很容易写错。<br>Vue可以让我们直接把绑定的class字符串指向data的一个对象，这样就非常方便了，既可以有智能提示，又可以很复杂进行编辑，不用担心烦人的<code>&quot;&quot;</code>了。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"static"</span></span></div><div class="line">     <span class="attr">v-bind:class</span>=<span class="string">"classObject"</span>&gt;</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">    <span class="attr">data</span>: &#123;</div><div class="line">      <span class="attr">classObject</span>: &#123;</div><div class="line">        <span class="attr">active</span>: <span class="literal">true</span>,</div><div class="line">        <span class="string">'text-danger'</span>: <span class="literal">false</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>结果：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"static active"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="绑定样式数组"><a href="#绑定样式数组" class="headerlink" title="绑定样式数组"></a>绑定样式数组</h3><p>其实绑定数组，就是绑定样式对象的延续，看官网的例子代码吧。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[activeClass, errorClass]"</span>&gt;</span></div><div class="line"></div><div class="line">data: &#123;</div><div class="line">  activeClass: 'active',</div><div class="line">  errorClass: 'text-danger'</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当然还有很多其他很有趣的支持，就不赘述了。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">例如:</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[isActive ? activeClass : '', errorClass]"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[&#123; active: isActive &#125;, errorClass]"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="内联样式绑定"><a href="#内联样式绑定" class="headerlink" title="内联样式绑定"></a>内联样式绑定</h3><p>内联样式的绑定，非常类似于样式类的操作。v-bind:style 的对象语法十分直观——看着非常像 CSS ，其实它是一个 JavaScript 对象。 CSS属性名可以用驼峰式（camelCase）或短横分隔命名（kebab-case）。</p>
<p>看个例子：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue入门之htmlraw<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"&#123;fontSize: size + 'px', backgroundColor: bgcolor, width: width&#125;"</span>&gt;</span></div><div class="line">      vue 入门系列教程</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">      <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">      <span class="attr">data</span>: &#123;</div><div class="line">        <span class="attr">size</span>: <span class="number">19</span>,</div><div class="line">        <span class="attr">width</span>: <span class="number">200</span>,</div><div class="line">        <span class="attr">bgcolor</span>: <span class="string">'red'</span></div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>自动添加前缀<br>当 v-bind:style 使用需要特定前缀的 CSS 属性时，如 transform ，Vue.js 会自动侦测并添加相应的前缀。</p>
<h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><p>在做数据的绑定的时候,数据要进行处理之后才能展示到html页面上，虽然vue提供了非常好的表达式绑定的方法，但是只能应对低强度的需求。比如： 把一个日期按照规定格式进行输出，可能就需要我们对日期对象做一些格式化的出来，表达式可能就捉襟见肘了。</p>
<p>Vue对象提供的computed属性，可以让我们开发者在里面可以放置一些方法，协助我们绑定数据操作，这些方法可以跟data中的属性一样用，注意这些方法用的时候不要加<code>()</code>。<br>例子来了：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue入门之htmlraw<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- computed里面的函数可以直接当成data里面的属性用，非常方便，注意没有括号！！！--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>生日<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; getBirthday &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; age &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>地址<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; address &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">      <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">      <span class="attr">data</span>: &#123;</div><div class="line">        <span class="attr">birthday</span>: <span class="number">914228510514</span>,     <span class="comment">// 这是一个日期对象的值：1998年11月1日</span></div><div class="line">        age: <span class="number">19</span>,</div><div class="line">        <span class="attr">address</span>: <span class="string">'北京昌平区龙泽飞龙'</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">computed</span>: &#123;</div><div class="line">        <span class="comment">// 把日期换成 常见规格格式的字符串。</span></div><div class="line">        getBirthday: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">          <span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="keyword">this</span>.birthday);</div><div class="line">          <span class="keyword">return</span> m.getFullYear() + <span class="string">'年'</span> + m.getMonth() +<span class="string">'月'</span>+ m.getDay()+<span class="string">'日'</span>;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="绑定的数据过滤器"><a href="#绑定的数据过滤器" class="headerlink" title="绑定的数据过滤器"></a>绑定的数据过滤器</h2><p>过滤器本质就是数据在呈现之前先进行过滤和筛选。官网上写的不错，我就不再赘述，下面是官网的描述。</p>
<p>Vue.js 允许你自定义过滤器，被用作一些常见的文本格式化。过滤器应该被添加在 mustache 插值的尾部，由“管道符”指示：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; message | capitalize &#125;&#125;</div><div class="line"><span class="comment">&lt;!-- in mustaches --&gt;</span></div><div class="line">&#123;&#123; message | capitalize &#125;&#125;</div><div class="line"><span class="comment">&lt;!-- in v-bind --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">"rawId | formatId"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">Vue 2.x 中，过滤器只能在 mustache 绑定和 v-bind 表达式（从 2.1.0 开始支持）中使用，因为过滤器设计目的就是用于文本转换。为了在其他指令中实现更复杂的数据变换，你应该使用计算属性。</div><div class="line"></div><div class="line">过滤器函数总接受表达式的值作为第一个参数。</div><div class="line">new Vue(&#123;</div><div class="line">  // ...</div><div class="line">  filters: &#123;</div><div class="line">    capitalize: function (value) &#123;</div><div class="line">      if (!value) return ''</div><div class="line">      value = value.toString()</div><div class="line">      return value.charAt(0).toUpperCase() + value.slice(1)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line">过滤器可以串联：</div><div class="line">&#123;&#123; message | filterA | filterB &#125;&#125;</div><div class="line">过滤器是 JavaScript 函数，因此可以接受参数：</div><div class="line">&#123;&#123; message | filterA('arg1', arg2) &#125;&#125;</div><div class="line">这里，字符串 'arg1' 将传给过滤器作为第二个参数， arg2 表达式的值将被求值然后传给过滤器作为第三个参数。</div></pre></td></tr></table></figure></p>
<h2 id="核心：自动响应对象的变化到HTML标签"><a href="#核心：自动响应对象的变化到HTML标签" class="headerlink" title="核心：自动响应对象的变化到HTML标签"></a>核心：自动响应对象的变化到HTML标签</h2><p>上面的例子都是 数据对象是写死在创建的Vue对像上，那如果数据（data）发生改变时会怎样呢？<br>让我们用chrome把上面例子的页面打开，并打开发者工具控制台,输入：<code>app.age = 20</code> 会有什么情况发生呢？</p>
<hr>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://orzuutv5f.bkt.clouddn.com/03vue%E5%93%8D%E5%BA%94.png" alt="响应" title="">
                </div>
                <div class="image-caption">响应</div>
            </figure>
<p>在页面中添加一个按钮，动态的增加年龄：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue入门之htmlraw<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- computed里面的函数可以直接当成data里面的属性用，非常方便，注意没有括号！！！--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>生日<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; getBirthday &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; age &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>地址<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; address &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 添加下面这行代码，动态增加 年龄，页面会有怎样的变化呢？？ --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"app.age+=1;"</span> &gt;</span>加加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">      <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">      <span class="attr">data</span>: &#123;</div><div class="line">        <span class="attr">birthday</span>: <span class="number">914228510514</span>,     <span class="comment">// 这是一个日期对象的值：1998年11月1日</span></div><div class="line">        age: <span class="number">19</span>,</div><div class="line">        <span class="attr">address</span>: <span class="string">'北京昌平区龙泽飞龙'</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">computed</span>: &#123;</div><div class="line">        <span class="comment">// 把日期换成 常见规格格式的字符串。</span></div><div class="line">        getBirthday: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">          <span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="keyword">this</span>.birthday);</div><div class="line">          <span class="keyword">return</span> m.getFullYear() + <span class="string">'年'</span> + m.getMonth() +<span class="string">'月'</span>+ m.getDay()+<span class="string">'日'</span>;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h2><p>上面的例子我们大多讲的是单向的 js对象向 HTML数据进行绑定，那HTML怎样向js进行反馈数据呢？<br>HTML中只有表达能接受用户的输入，最简单的演示双向绑定的就是文本框了。</p>
<p>Vue提供了一个新的指令：v-model进行双向数据的绑定，注意不是v-bind。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue入门之htmlraw<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- v-model可以直接指向data中的属性，双向绑定就建立了 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"txt"</span> <span class="attr">v-model</span>=<span class="string">"msg"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>您输入的信息是：&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">      <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">      <span class="attr">data</span>: &#123;</div><div class="line">        <span class="attr">msg</span>: <span class="string">'双向数据绑定的例子'</span></div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>最终的结果就是：你改变input文本框的内容的时候，p标签中的内容会跟着进行改变，哇是不是很神奇呢…</p>
<p>关于其他表单的绑定的语法我就不赘述了，还是参考官网吧，我这里大部分例子也是来自<a href="https://cn.vuejs.org/v2/guide/forms.html#基础用法" target="_blank" rel="external">官网</a>。</p>
<h2 id="数据绑定总结"><a href="#数据绑定总结" class="headerlink" title="数据绑定总结"></a>数据绑定总结</h2><p>vue提供了大量的绑定的语法和方法，非常方便我们进行数据的绑定，尤其它是双向的数据绑定，极大的减少了我们dom操作的麻烦程度。可能你越来越喜欢它了吧…</p>
]]></content>
    
    <summary type="html">
    
      本文主要介绍了Vue中的数据绑定机制
    
    </summary>
    
      <category term="VueJS" scheme="http://yoursite.com/categories/VueJS/"/>
    
    
      <category term="前端框架" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Vuejs" scheme="http://yoursite.com/tags/Vuejs/"/>
    
      <category term="Vue的数据绑定" scheme="http://yoursite.com/tags/Vue%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/"/>
    
  </entry>
  
  <entry>
    <title>CSS3的介绍</title>
    <link href="http://yoursite.com/2017/06/03/css3/"/>
    <id>http://yoursite.com/2017/06/03/css3/</id>
    <published>2017-06-03T05:34:02.000Z</published>
    <updated>2017-06-03T05:36:14.289Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h1 id="正文开始"><a href="#正文开始" class="headerlink" title="正文开始"></a>正文开始</h1><p><center style="font-size: 30px">CSS3</center></p>
<hr>
<h2 id="摘要："><a href="#摘要：" class="headerlink" title="摘要："></a>摘要：</h2><p>直到今天，伴随着 Web2.0 技术的流行，以前的 CSS2 标准和相关技术似乎早已经不能够满足不了日益增长的开发需求：人们需要实现更加美观、用户体验更好的HTML界面。CSS3，这个新一代的标准由此诞生。CSS3为了满足现有的对于 Web UI 的开发需求，它提供了一系列强大的功能和新特性，如许多新的 CSS 属性（文字，布局，颜色等等），以及各种 CSS 特效，甚至还支持 CSS 动画、元素的变形。这些 CSS 新特性在现阶段来说都是非常强大和完善的，您只需要加入简单的的几行 CSS 代码便可以实现出一系列令人眼前一亮的炫酷效果，这比我们之前用 JavaScript 去模拟实现这样的效果要好得多，不仅降低了开发复杂程度，代码变得易维护，在性能上也得到突飞猛进的进步。下面将主要来介绍 CSS3 的新特性以及一些使用上的方法和技巧。</p>
<h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><p>CSS即层叠样式表（Cascading StyleSheet）。 在HTML网页制作过程中采用层叠样式表技术，可以有效地对HTMl页面的布局、颜色、背景、字体和其它效果实现更加精确的控制。 只要对相应的代码做一些简单的修改或添加，就可以使同一页面的不同区域，或者页数不同的网页的格式和外观。</p>
<p>CSS3是CSS技术的升级版本，CSS3语言开发是朝着模块化方向发展的。以前的CSS2规范作为一个模块实在是太庞大而且比较复杂，所以，把它拆解为一个个小的模块，更多新的模块也被同时加入进来。这些模块包括：超链接方式 、语言模块 、边框和背景 、文字特效、盒子模型、列表模块、、多栏布局等模块。</p>
<p>CSS3是在CSS的接触上增加了很多新的特性，而且CSS3与低版本的CSS并不冲突。</p>
<p>CSS3新特性涉及范围非常广泛，这里挑选一些被浏览器支持较为完美、更具实用性的几个新特性。</p>
<p>1.强大的CSS3选择器<br>2.抛弃图片的视觉效果<br>3.背景的变革<br>4.盒模型变化<br>5.阴影效果<br>6.多列布局与弹性盒模型布局<br>7.Web字体和Web Font图标<br>8.颜色和透明度<br>9.圆角与边框的新法<br>10.盒容器的变形<br>11.CSS3过渡与动画交互效果<br>12.媒体特性与Responsive布局</p>
<h2 id="使用CSS3有什么好处"><a href="#使用CSS3有什么好处" class="headerlink" title="使用CSS3有什么好处"></a>使用CSS3有什么好处</h2><p>与CSS比起来，使用CSS3有什么好处呢？最明显的就是CSS3的使用能让页面看起来非常炫酷，而且操作手法简单，使网站设计更加具有美感，但是它的好处远远不止有这些。在绝大多数的情况下， 使用CSS3不仅有利于开发与维护，而且还能提高网站的整体性能。与此同时，CSS3的使用还可以增加网站的可读性、可访问性、可用性，使制作的网站能适配更多的设备，甚至还可以优化网站SEO操作，同时提升网站的搜索排名结果。下面介绍CSS3特有的好处。</p>
<p>1.减少网站的开发成本与维护成本<br>2.很大程度的提高页面性能</p>
<h2 id="CSS3的现状"><a href="#CSS3的现状" class="headerlink" title="CSS3的现状"></a>CSS3的现状</h2><p>网页制作中使用CSS3会带来非常多的好处，目前国内外使用CSS3特性制作网站的案例越来越多，特别是一些优秀的个人站点和项目，更是将其使用得出神入化。</p>
<h2 id="CSS3的未来"><a href="#CSS3的未来" class="headerlink" title="CSS3的未来"></a>CSS3的未来</h2><p>CSS3技术无疑对Web前端开发带来质的进步。虽然目前CSS3还没有完全普及到各个浏览器，但对于我们积极地去学习和使用并不矛盾，学习和掌握CSS3必是大势所趋。CSS3将会是引导我们进入编写网页精彩世界的先驱技术。前端开发人员能够通过CSS3更轻松地创建功能强大、易于维护网站。<br>随着旧版浏览器所占市场份额逐渐减少，学习CSS3技术将更有优势和价值。目前来说这是作为一位优秀前端开发人员所必须掌握的技术之一，也是前端开发人员的大势所趋。<br>当然，如果想学习一门新技术不能盲目的跟风，需要理性思考，但是这种理性思考并不表示对新技术的畏畏缩缩，同时也应该知道学习新技术过程中可能遇到的风险和困难。只有这样，才能更好地学习和使用CSS3技术。</p>
<h2 id="CSS3的兼容性问题"><a href="#CSS3的兼容性问题" class="headerlink" title="CSS3的兼容性问题"></a>CSS3的兼容性问题</h2><p>幸运的是，CSS3特性大部分浏览器都已经有了很好的支持度。各大主流浏览器对CSS3的支持越来越完善，那个曾经让多少前端开发人员心碎的IE浏览器也开始慢慢使用CSS3标准行列。当然，即使CSS3标准制定完成，现代浏览器要普及到大部分用户也是一定是个相当漫长的过程。如果你现在就打算使用CSS3来美化你的站点，那么就有必要对各大主流浏览器对其新技术的支持情况有一个全面的了解。</p>
<p>CSS3在各个浏览器下需要添加私有前缀<br>常用浏览器    内核             私有前缀<br>Chrome     webkit           -weibkit-<em><br>firefox      moz              -moz-</em><br>opera(老版)    o                -o-<em><br>IE           ms               -ms-</em></p>
<h3 id="为什么会有私有前缀"><a href="#为什么会有私有前缀" class="headerlink" title="为什么会有私有前缀:"></a>为什么会有私有前缀:</h3><p>Chrome低版本  为了早早的支持还没有发布正式版本的CSS3的属性 所以在属性前加了一个自己浏览器认识的标志</p>
<h2 id="如何在工作学习中运用CSS3"><a href="#如何在工作学习中运用CSS3" class="headerlink" title="如何在工作学习中运用CSS3"></a>如何在工作学习中运用CSS3</h2><p>1.统一环境 (chrome firefox)<br>2.放下兼容性 (1.加私有前缀  2.去js中寻找方法)</p>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>上面的内容介绍了什么是CSS3、CSS3的发展状况、新特性，以及浏览器对CSS3的支持情况；学习CSS3的好处有很多，它能让你始终处于web网页制作技术的前沿，增加你的职业技能和竞争力，还会帮助你缩短与顶级设计师或开发者的距离。</p>
]]></content>
    
    <summary type="html">
    
      本文主要介绍了CSS3的简单介绍
    
    </summary>
    
      <category term="CSS3" scheme="http://yoursite.com/categories/CSS3/"/>
    
    
      <category term="CSS3" scheme="http://yoursite.com/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>前端构建工具gulp入门教程</title>
    <link href="http://yoursite.com/2017/04/26/gulp/"/>
    <id>http://yoursite.com/2017/04/26/gulp/</id>
    <published>2017-04-26T15:42:26.000Z</published>
    <updated>2017-05-14T14:14:55.055Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h1 id="正文部分"><a href="#正文部分" class="headerlink" title="正文部分"></a><code>正文部分</code></h1><h2 id="第一步：安装Node"><a href="#第一步：安装Node" class="headerlink" title="第一步：安装Node"></a>第一步：安装Node</h2><p>&#160; &#160; &#160; &#160;首先，最基本也最重要的是，我们需要搭建<code>node</code>环境。访问 <a href="http://nodejs.org" target="_blank" rel="external">http://nodejs.org</a> ，然后点击大大的绿色的 <code>install</code> 按钮，下载完成后直接运行程序，就一切准备就绪。 npm 会随着安装包一起安装，稍后会用到它</p>
<h2 id="第二步：使用命令行"><a href="#第二步：使用命令行" class="headerlink" title="第二步：使用命令行"></a>第二步：使用命令行</h2><p>&#160; &#160; &#160; &#160;也许现在你还不是很了解什么是命令行——OSX中的终端（Terminal），windows中的命令提示符（Command Prompt），但很快你就会知道。它看起来没那么简单，但一旦掌握了它的窍门，就可以很方便的执行很多命令行程序，比如Sass，Yeoman和Git等，这些都是非常有用的工具。</p>
<p>如果你很熟悉命令行，直接跳到步骤四。<br>为了确保Node已经正确安装，我们执行几个简单的命令。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node -v</div></pre></td></tr></table></figure>
<p>回车（Enter），如果正确安装的话，你会看到所安装的<code>Node</code>的版本号，<br>接下来看看<code>npm</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm -v</div></pre></td></tr></table></figure></p>
<p>这同样能得到<code>npm</code>的版本号。</p>
<p>如果这两行命令没有得到返回，可能node就没有安装正确，尝试重启下命令行工具，如果还不行的话，只能回到第一步进行重装。</p>
<h2 id="第三步：定位到项目"><a href="#第三步：定位到项目" class="headerlink" title="第三步：定位到项目"></a>第三步：定位到项目</h2><p>&#160; &#160; &#160; &#160;现在，我们已经大致了解了命令行并且知道如何简单使用它，接下来只需要两个简单的命令就能定位到文件目录并看看目录里都有些什么文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd  定位到目录</div><div class="line">ls  列出文件列表</div></pre></td></tr></table></figure></p>
<p>&#160; &#160; &#160; &#160;建议多敲敲这两个命令，了解文件系统并知道文件都在哪里。<br>习惯使用了这两个命令后，就要进入我们的项目目录，这个目录各不相同，举个例子，这是我进入我项目目录的命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd /Applications/XAMPP/xamppfiles/htdocs/my-project</div></pre></td></tr></table></figure>
<p>成功进入项目目录后，我们开始安装<code>gulp</code>。</p>
<h2 id="第四步：安装gulp"><a href="#第四步：安装gulp" class="headerlink" title="第四步：安装gulp"></a>第四步：安装gulp</h2><p>&#160; &#160; &#160; &#160;我们已经知道如何使用命令行，现在尝试点新的东西，认识<code>npm</code>然后安装<code>gulp</code>。</p>
<p>&#160; &#160; &#160; &#160;<code>NPM</code>是基于命令行的<code>node</code>包管理工具，它可以将<code>node</code>的程序模块安装到项目中，在它的 官网 中可以查看和搜索所有可用的程序模块。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo npm install -g gulp</div></pre></td></tr></table></figure>
<p>&#160; &#160; &#160; &#160;<code>sudo</code>是以管理员身份执行命令，一般会要求输入电脑密码<br>npm是安装node模块的工具，执行install命令</p>
<p>&#160; &#160; &#160; &#160;<code>-g</code>表示在全局环境安装，以便任何项目都能使用它</p>
<p>&#160; &#160; &#160; &#160;最后，<code>gulp</code>是将要安装的node模块的名字<br>运行时注意查看命令行有没有错误信息，安装完成后，你可以使用下面的命令查看gulp的版本号以确保<code>gulp</code>已经被正确安装。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp -v</div></pre></td></tr></table></figure>
<p>接下来，我们需要将gulp安装到项目本地</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install —-save-dev gulp</div></pre></td></tr></table></figure>
<p>&#160; &#160; &#160; &#160;这里，我们使用 <code>—-save-dev</code> 来更新package.json文件，更新 devDependencies 值，以表明项目需要依赖gulp。</p>
<p>&#160; &#160; &#160; &#160;Dependencies 可以向其他参与项目的人指明项目在开发环境和生产环境中的node模块依懒关系，想要更加深入的了解它可以看看 package.json文档 。</p>
<h2 id="第五步：运行gulp"><a href="#第五步：运行gulp" class="headerlink" title="第五步：运行gulp"></a>第五步：运行gulp</h2><p>&#160; &#160; &#160; &#160;安装好<code>gulp</code>后我们需要告诉它要为我们执行哪些任务，首先，我们自己需要弄清楚项目需要哪些任务。</p>
<p>检查<code>Javascript</code><br>编译<code>Sass</code>（或Less之类的）文件<br>合并<code>Javascript</code><br>压缩并重命名合并后的<code>Javascript</code><br>安装依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install gulp-jshint gulp-sass gulp-concat gulp-uglify gulp-rename --save-dev</div></pre></td></tr></table></figure></p>
<p>&#160; &#160; &#160; &#160;提醒下，如果以上命令提示权限错误，需要添加 sudo 再次尝试。<br>新建<code>gulpfile</code>文件</p>
<p>&#160; &#160; &#160; &#160;现在，组件都安装完毕，我们需要新建<code>gulpfile</code>文件以指定gulp需要为我们完成什么任务。</p>
<p>&#160; &#160; &#160; &#160;<code>gulp</code>只有五个方法： task ， run ， watch ， src ，和 dest ，在项目根目录新建一个js文件并命名为 <code>gulpfile.js</code> ，把下面的代码粘贴进去：</p>
<h3 id="gulpfile-js"><a href="#gulpfile-js" class="headerlink" title="gulpfile.js"></a><code>gulpfile.js</code></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 引入 gulp</span></div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>); </div><div class="line"></div><div class="line"><span class="comment">// 引入组件</span></div><div class="line"><span class="keyword">var</span> jshint = <span class="built_in">require</span>(<span class="string">'gulp-jshint'</span>);</div><div class="line"><span class="keyword">var</span> sass = <span class="built_in">require</span>(<span class="string">'gulp-sass'</span>);</div><div class="line"><span class="keyword">var</span> concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>);</div><div class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</div><div class="line"><span class="keyword">var</span> rename = <span class="built_in">require</span>(<span class="string">'gulp-rename'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 检查脚本</span></div><div class="line">gulp.task(<span class="string">'lint'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'./js/*.js'</span>)</div><div class="line">        .pipe(jshint())</div><div class="line">        .pipe(jshint.reporter(<span class="string">'default'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 编译Sass</span></div><div class="line">gulp.task(<span class="string">'sass'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'./scss/*.scss'</span>)</div><div class="line">        .pipe(sass())</div><div class="line">        .pipe(gulp.dest(<span class="string">'./css'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 合并，压缩文件</span></div><div class="line">gulp.task(<span class="string">'scripts'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'./js/*.js'</span>)</div><div class="line">        .pipe(concat(<span class="string">'all.js'</span>))</div><div class="line">        .pipe(gulp.dest(<span class="string">'./dist'</span>))</div><div class="line">        .pipe(rename(<span class="string">'all.min.js'</span>))</div><div class="line">        .pipe(uglify())</div><div class="line">        .pipe(gulp.dest(<span class="string">'./dist'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 默认任务</span></div><div class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    gulp.run(<span class="string">'lint'</span>, <span class="string">'sass'</span>, <span class="string">'scripts'</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 监听文件变化</span></div><div class="line">    gulp.watch(<span class="string">'./js/*.js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        gulp.run(<span class="string">'lint'</span>, <span class="string">'sass'</span>, <span class="string">'scripts'</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="分段解释代码。"><a href="#分段解释代码。" class="headerlink" title="分段解释代码。"></a>分段解释代码。</h2><h3 id="引入组件"><a href="#引入组件" class="headerlink" title="引入组件"></a>引入组件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>); </div><div class="line"></div><div class="line"><span class="keyword">var</span> jshint = <span class="built_in">require</span>(<span class="string">'gulp-jshint'</span>);</div><div class="line"><span class="keyword">var</span> sass = <span class="built_in">require</span>(<span class="string">'gulp-sass'</span>);</div><div class="line"><span class="keyword">var</span> concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>);</div><div class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</div><div class="line"><span class="keyword">var</span> rename = <span class="built_in">require</span>(<span class="string">'gulp-rename'</span>);</div></pre></td></tr></table></figure>
<p>&#160; &#160; &#160; &#160;这一步，我们引入了核心的gulp和其他依赖组件，接下来，分开创建lint, sass, scripts 和 default这四个不同的任务。</p>
<h4 id="Lint任务"><a href="#Lint任务" class="headerlink" title="Lint任务"></a><code>Lint</code>任务</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'lint'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'./js/*.js'</span>)</div><div class="line">        .pipe(jshint())</div><div class="line">        .pipe(jshint.reporter(<span class="string">'default'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>&#160; &#160; &#160; &#160;<code>Link</code>任务会检查 js/ 目录下得js文件有没有报错或警告。</p>
<h4 id="Sass任务"><a href="#Sass任务" class="headerlink" title="Sass任务"></a><code>Sass</code>任务</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'sass'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'./scss/*.scss'</span>)</div><div class="line">        .pipe(sass())</div><div class="line">        .pipe(gulp.dest(<span class="string">'./css'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>&#160; &#160; &#160; &#160;<code>Sass</code>任务会编译 scss/ 目录下的scss文件，并把编译完成的css文件保存到 /css 目录中。</p>
<h4 id="Scripts-任务"><a href="#Scripts-任务" class="headerlink" title="Scripts 任务"></a><code>Scripts</code> 任务</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'scripts'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'./js/*.js'</span>)</div><div class="line">        .pipe(concat(<span class="string">'all.js'</span>))</div><div class="line">        .pipe(gulp.dest(<span class="string">'./dist'</span>))</div><div class="line">        .pipe(rename(<span class="string">'all.min.js'</span>))</div><div class="line">        .pipe(uglify())</div><div class="line">        .pipe(gulp.dest(<span class="string">'./dist'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>&#160; &#160; &#160; &#160;<code>scripts</code>任务会合并 js/ 目录下得所有得js文件并输出到 dist/ 目录，然后gulp会重命名、压缩合并的文件，也输出到 dist/ 目录。</p>
<h4 id="default任务"><a href="#default任务" class="headerlink" title="default任务"></a><code>default</code>任务</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//监视src下的文件如果发生改变，重新执行打包任务</span></div><div class="line">    gulp.watch(<span class="string">'./src/**/*.*'</span>, [<span class="string">'lint'</span>, <span class="string">'sass'</span>, <span class="string">'scripts'</span>]);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>&#160; &#160; &#160; &#160;这时，我们创建了一个基于其他任务的<code>default</code>任务。使用 .watch() 方法去监听指定目录的文件变化，当有文件变化时，会运行回调定义的其他任务。</p>
<p>现在，回到命令行，可以直接运行<code>gulp</code>任务了。</p>
<h3 id="gulp"><a href="#gulp" class="headerlink" title="gulp"></a><code>gulp</code></h3><p>这将执行定义的default任务，换言之，这和以下的命令式同一个意思</p>
<h3 id="gulp-default"><a href="#gulp-default" class="headerlink" title="gulp default"></a><code>gulp default</code></h3><p>当然，我们可以运行在gulpfile.js中定义的任意任务，比如，现在运行sass任务：</p>
<h3 id="gulp-sass"><a href="#gulp-sass" class="headerlink" title="gulp sass"></a><code>gulp sass</code></h3><p>(Kimi: 哇塞，酷比了哎~)</p>
<h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>现在已经做到了设置gulp任务然后运行他们，现在再回顾下之前学习的。</p>
<p>学习了安装Node环境<br>学习了简单使用命令行<br>学习了用命令行进入项目目录<br>学习了使用npm和安装gulp<br>学习了如何运行gulp任务<br>另外，有一些参考资源供进一步学习：<a href="http://www.gulpjs.com.cn/" target="_blank" rel="external">http://www.gulpjs.com.cn/</a></p>
]]></content>
    
    <summary type="html">
    
      本文假设你之前没有用过任何任务脚本（task runner）和命令行工具，一步步教你上手Gulp。不要怕，它其实很简单，我会分为五步向你介绍gulp并帮助你完成一些惊人的事情。那就直接开始吧
    
    </summary>
    
      <category term="构建工具" scheme="http://yoursite.com/categories/%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="前端构建工具" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    
      <category term="打包压缩工具" scheme="http://yoursite.com/tags/%E6%89%93%E5%8C%85%E5%8E%8B%E7%BC%A9%E5%B7%A5%E5%85%B7/"/>
    
      <category term="gulp" scheme="http://yoursite.com/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>Token ，Cookie和Session的区别</title>
    <link href="http://yoursite.com/2017/04/25/cookie/"/>
    <id>http://yoursite.com/2017/04/25/cookie/</id>
    <published>2017-04-25T05:17:02.000Z</published>
    <updated>2017-05-18T08:08:59.122Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h1 id="正文开始"><a href="#正文开始" class="headerlink" title="正文开始"></a>正文开始</h1><p><center style="font-size: 30px"><code>Token ，Cookie和Session的区别</code></center></p>
<hr>
<p>&#160; &#160; &#160; &#160;在做接口测试时，经常会碰到请求参数为token的类型，但是可能大部分测试人员对token，cookie，session的区别还是一知半解。为此我查阅大量的资料做了如下总结。 </p>
<p>&#160; &#160; &#160; &#160;此篇文章也许是最全最通俗的关于Token ，Cookie和Session的区别的文章，好好揣摩文章的每一个字，也许你会有更深的理解！</p>
<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>&#160; &#160; &#160; &#160;cookie 是一个非常具体的东西，指的就是浏览器里面能永久存储的一种数据，仅仅是浏览器实现的一种数据存储功能。</p>
<p>&#160; &#160; &#160; &#160;cookie由服务器生成，发送给浏览器，浏览器把cookie以kv形式保存到某个目录下的文本文件内，下一次请求同一网站时会把该cookie发送给服务器。由于cookie是存在客户端上的，所以浏览器加入了一些限制确保cookie不会被恶意使用，同时不会占据太多磁盘空间，所以每个域的cookie数量是有限的。</p>
<h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p>&#160; &#160; &#160; &#160;session 从字面上讲，就是会话。这个就类似于你和一个人交谈，你怎么知道当前和你交谈的是张三而不是李四呢？对方肯定有某种特征（长相等）表明他就是张三。</p>
<p>&#160; &#160; &#160; &#160;session 也是类似的道理，服务器要知道当前发请求给自己的是谁。为了做这种区分，服务器就要给每个客户端分配不同的“身份标识”，然后客户端每次向服务器发请求的时候，都带上这个“身份标识”，服务器就知道这个请求来自于谁了。至于客户端怎么保存这个“身份标识”，可以有很多种方式，对于浏览器客户端，大家都默认采用 cookie 的方式。</p>
<p>&#160; &#160; &#160; &#160;服务器使用session把用户的信息临时保存在了服务器上，用户离开网站后session会被销毁。这种用户信息存储方式相对cookie来说更安全，可是session有一个缺陷：如果web服务器做了负载均衡，那么下一个操作请求到了另一台服务器的时候session会丢失。</p>
<h2 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h2><p>&#160; &#160; &#160; &#160;token的意思是“令牌”，是用户身份的验证方式，最简单的token组成:uid(用户唯一的身份标识)、time(当前时间的时间戳)、sign(签名，由token的前几位+盐以哈希算法压缩成一定长的十六进制字符串，可以防止恶意第三方拼接token请求服务器)。还可以把不变的参数也放进token，避免多次查库！</p>
<h2 id="传统身份验证"><a href="#传统身份验证" class="headerlink" title="传统身份验证"></a>传统身份验证</h2><p>&#160; &#160; &#160; &#160;HTTP 是一种没有状态的协议，也就是它并不知道是谁是访问应用。这里我们把用户看成是客户端，客户端使用用户名还有密码通过了身份验证，不过下回这个客户端再发送请求时候，还得再验证一下。</p>
<p>&#160; &#160; &#160; &#160;解决的方法就是，当用户请求登录的时候，如果没有问题，我们在服务端生成一条记录，这个记录里可以说明一下登录的用户是谁，然后把这条记录的 ID 号发送给客户端，客户端收到以后把这个 ID 号存储在 Cookie 里，下次这个用户再向服务端发送请求的时候，可以带着这个 Cookie ，这样服务端会验证一个这个 Cookie 里的信息，看看能不能在服务端这里找到对应的记录，如果可以，说明用户已经通过了身份验证，就把用户请求的数据返回给客户端。</p>
<p>&#160; &#160; &#160; &#160;上面说的就是 Session，我们需要在服务端存储为登录的用户生成的 Session ，这些 Session 可能会存储在内存，磁盘，或者数据库里。我们可能需要在服务端定期的去清理过期的 Session 。</p>
<h2 id="基于-Token-的身份验证"><a href="#基于-Token-的身份验证" class="headerlink" title="基于 Token 的身份验证"></a>基于 Token 的身份验证</h2><p>&#160; &#160; &#160; &#160;使用基于 Token 的身份验证方法，在服务端不需要存储用户的登录记录。大概的流程是这样的：</p>
<ul>
<li>客户端使用用户名跟密码请求登录</li>
<li>服务端收到请求，去验证用户名与密码</li>
<li>验证成功后，服务端会签发一个 Token，再把这个 Token 发送给客户端</li>
<li>客户端收到 Token 以后可以把它存储起来，比如放在 Cookie 里或者 Local Storage 里</li>
<li>客户端每次向服务端请求资源的时候需要带着服务端签发的 Token</li>
<li>服务端收到请求，然后去验证客户端请求里面带着的Token，如果验证成功，就向客户端返回请求数据</li>
</ul>
<p>&#160; &#160; &#160; &#160;APP登录的时候发送加密的用户名和密码到服务器，服务器验证用户名和密码，如果成功，以某种方式比如随机生成32位的字符串作为token，存储到服务器中，并返回token到APP，以后APP请求时，凡是需要验证的地方都要带上该token，然后服务器端验证token，成功返回所需要的结果，失败返回错误信息，让他重新登录。其中服务器上token设置一个有效期，每次APP请求的时候都验证token和有效期。</p>
<p>&#160; &#160; &#160; &#160;那么我的问题来了： 1.服务器上的token存储到数据库中，每次查询会不会很费时。如果不存储到数据库，应该存储到哪里呢。 2.客户端得到的token肯定要加密存储的，发送token的时候再解密。存储到数据库还是配置文件呢？</p>
<p>&#160; &#160; &#160; &#160;token是个易失数据，丢了无非让用户重新登录一下，新浪微博动不动就让我重新登录，反正这事儿我是无所谓啦。 </p>
<p>&#160; &#160; &#160; &#160;所以如果你觉得普通的数据库表撑不住了，可以放到 MSSQL/<code>MySQL</code> 的内存表里（不过据说mysql的内存表性能提升有限），可以放到 Memcache里（讲真，这个是挺常见的策略），可以放到<code>Redis</code>里（我做过这样的实现），甚至可以放到 OpenResty 的变量字典里（只要你有信心不爆内存）。</p>
<p>&#160; &#160; &#160; &#160;token是个凭条，不过它比门票温柔多了，门票丢了重新花钱买，token丢了重新操作下认证一个就可以了，因此token丢失的代价是可以忍受的——前提是你别丢太频繁，要是让用户隔三差五就认证一次那就损失用户体验了。</p>
<p>&#160; &#160; &#160; &#160;基于这个出发点，如果你认为用数据库来保持token查询时间太长，会成为你系统的瓶颈或者隐患，可以放在内存当中。<br>比如memcached、redis，KV方式很适合你对token查询的需求。<br>&#160; &#160; &#160; &#160;这个不会太占内存，比如你的token是32位字符串，要是你的用户量在百万级或者千万级，那才多少内存。 </p>
<p>&#160; &#160; &#160; &#160;要是数据量真的大到单机内存扛不住，或者觉得一宕机全丢风险大，只要这个token生成是足够均匀的，高低位切一下分到不同机器上就行，内存绝对不会是问题。</p>
<p>&#160; &#160; &#160; &#160;客户端方面这个除非你有一个非常安全的办法，比如操作系统提供的隐私数据存储，那token肯定会存在泄露的问题。比如我拿到你的手机，把你的token拷出来，在过期之前就都可以以你的身份在别的地方登录。 </p>
<p>解决这个问题的一个简单办法:</p>
<p>1、在存储的时候把token进行对称加密存储，用时解开。<br>2、将请求URL、时间戳、token三者进行合并加盐签名，服务端校验有效性。<br>这两种办法的出发点都是：窃取你存储的数据较为容易，而反汇编你的程序hack你的加密解密和签名算法是比较难的。然而其实说难也不难，所以终究是防君子不防小人的做法。话说加密存储一个你要是被人扒开客户端看也不会被喷明文存储……<br>方法1它拿到存储的密文解不开、方法2它不知道你的签名算法和盐，两者可以结合食用。<br>但是如果token被人拷走，他自然也能植入到自己的手机里面，那到时候他的手机也可以以你的身份来用着，这你就瞎了。<br>于是可以提供一个让用户可以主动expire一个过去的token类似的机制，在被盗的时候能远程止损。</p>
<p>在网络层面上token明文传输的话会非常的危险，所以建议一定要使用HTTPS，并且把token放在post body里。</p>
]]></content>
    
    <summary type="html">
    
      本文主要介绍了Token ，Cookie和Session的区别
    
    </summary>
    
      <category term="数据交互" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92/"/>
    
    
      <category term="cookie" scheme="http://yoursite.com/tags/cookie/"/>
    
      <category term="Session" scheme="http://yoursite.com/tags/Session/"/>
    
      <category term="Token" scheme="http://yoursite.com/tags/Token/"/>
    
  </entry>
  
  <entry>
    <title>angularjs(四)</title>
    <link href="http://yoursite.com/2017/04/25/angular-4/"/>
    <id>http://yoursite.com/2017/04/25/angular-4/</id>
    <published>2017-04-25T05:17:02.000Z</published>
    <updated>2017-05-14T14:15:22.852Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正文开始"><a href="#正文开始" class="headerlink" title="正文开始"></a>正文开始</h1><p><center style="font-size: 30px"><code>过滤器</code></center></p>
<hr>
<h2 id="1-过滤器"><a href="#1-过滤器" class="headerlink" title="1.过滤器"></a>1.过滤器</h2><p>&#160; &#160; &#160; &#160;过滤器<code>（filter）</code>正如其名，作用就是接收一个输入，通过某个规则进行处理，然后返回处理后的结果。主要用在数据的格式化上，例如获取一个数组中的子集，对数组中的元素进行排序等。过滤器通常是伴随标记来使用的，将你model中的数据格式化为需要的格式。表单的控制功能主要涉及到数据验证以及表单控件的增强。ng内置了一些过滤器，它们是：</p>
<p>currency(货币)、date(日期)、filter(子串匹配)、json(格式化json对象)、limitTo(限制个数)、lowercase(小写)、uppercase(大写)、number(数字)、orderBy(排序)。</p>
<h3 id="过滤器使用方式"><a href="#过滤器使用方式" class="headerlink" title="过滤器使用方式"></a>过滤器使用方式</h3><p>&#160; &#160; &#160; &#160;总共九种。除此之外还可以自定义过滤器，这个就强大了，可以满足任何要求的数据处理。Filter还是很简单的，需要明白的是内置的<code>filter</code>如何使用，以及自己如何定义一个<code>filter</code>。</p>
<h4 id="filter的两种使用方法："><a href="#filter的两种使用方法：" class="headerlink" title="filter的两种使用方法："></a>filter的两种使用方法：</h4><h5 id="1-在模板中使用filter"><a href="#1-在模板中使用filter" class="headerlink" title="1. 在模板中使用filter"></a>1. 在模板中使用filter</h5><p>我们可以直接在双括号中使用<code>filter</code>，跟在表达式后面用 | 分割，语法如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; expression | filter &#125;&#125;</div></pre></td></tr></table></figure>
<p>也可以多个<code>filter</code>连用，上一个filter的输出将作为下一个filter的输入：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; expression | filter1 | filter2 | ... &#125;&#125;</div></pre></td></tr></table></figure>
<p>filter可以接收参数，参数用 : 进行分割，如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; expression | filter:argument1:argument2:... &#125;&#125;</div></pre></td></tr></table></figure>
<p>除了对双括号中的数据进行格式化，我们还可以在指令中使用filter，例如先对数组array进行过滤处理，然后再循环输出：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">ng-repeat</span>=<span class="string">"a in array | filter "</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="2-在controller和service中使用filter"><a href="#2-在controller和service中使用filter" class="headerlink" title="2. 在controller和service中使用filter"></a>2. 在controller和service中使用filter</h5><p>&#160; &#160; &#160; &#160;我们的js代码中也可以使用过滤器，方式就是我们熟悉的依赖注入，例如我要在controller中使用currency过滤器，只需将它注入到该controller中即可，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">app.controller(<span class="string">'testC'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope,currencyFilter</span>)</span>&#123;</div><div class="line">    $scope.num = currencyFilter(<span class="number">123534</span>);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　</p>
<p>在模板中使用就可以直接输出$123,534.00了！在服务中使用filter也是同样的道理。</p>
<p>&#160; &#160; &#160; &#160;如果你要在controller中使用多个filter，并不需要一个一个注入吗，ng提供了一个$filter服务可以来调用所需的filter，你只需注入一个$filter就够了，使用方法如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">app.controller(<span class="string">'testC'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope,$filter</span>)</span>&#123;</div><div class="line">    $scope.num = $filter(<span class="string">'currency'</span>)(<span class="number">123534</span>);　　</div><div class="line">    $scope.date = $filter(<span class="string">'date'</span>)(<span class="keyword">new</span> <span class="built_in">Date</span>());  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以达到同样的效果。好处是你可以方便使用不同的filter了。</p>
<h2 id="3-ng的内置过滤器"><a href="#3-ng的内置过滤器" class="headerlink" title="3. ng的内置过滤器"></a>3. ng的内置过滤器</h2><p>&#160; &#160; &#160; &#160;ng内置了九种过滤器，使用方法都非常简单，看文档即懂。不过为了以后不去翻它的文档，我在这里还是做一个详细的记录。<br>&#160; &#160; &#160; &#160;currency(货币)、date(日期)、filter(子串匹配)、json(格式化json对象)、limitTo(限制个数)、lowercase(小写)、uppercase(大写)、number(数字)、orderBy(排序)</p>
<h3 id="1-currency-货币处理"><a href="#1-currency-货币处理" class="headerlink" title="1. currency (货币处理)"></a>1. currency (货币处理)</h3><p>&#160; &#160; &#160; &#160;使用currency可以将数字格式化为货币，默认是美元符号，你可以自己传入所需的符号，例如我传入人民币：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123;num | currency : <span class="string">'￥'</span>&#125;&#125;</div></pre></td></tr></table></figure>
<h3 id="2-date-日期格式化"><a href="#2-date-日期格式化" class="headerlink" title="2. date (日期格式化)"></a>2. date (日期格式化)</h3><p>&#160; &#160; &#160; &#160;原生的js对日期的格式化能力有限，ng提供的date过滤器基本可以满足一般的格式化要求。用法如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123;date | date : <span class="string">'yyyy-MM-dd hh:mm:ss EEEE'</span>&#125;&#125;</div></pre></td></tr></table></figure>
<p>　<br>&#160; &#160; &#160; &#160;参数用来指定所要的格式，y M d h m s E 分别表示 年 月 日 时 分 秒 星期，你可以自由组合它们。也可以使用不同的个数来限制格式化的位数。另外参数也可以使用特定的描述性字符串，例如“shortTime”将会把时间格式为12:05 pm这样的。ng提供了八种描述性的字符串，个人觉得这些有点多余，我完全可以根据自己的意愿组合出想要的格式，不愿意去记这么多单词~</p>
<h3 id="3-filter-匹配子串"><a href="#3-filter-匹配子串" class="headerlink" title="3. filter(匹配子串)"></a>3. filter(匹配子串)</h3><p>&#160; &#160; &#160; &#160;这个名叫filter的filter。用来处理一个数组，然后可以过滤出含有某个子串的元素，作为一个子数组来返回。可以是字符串数组，也可以是对象数组。如果是对象数组，可以匹配属性的值。它接收一个参数，用来定义子串的匹配规则。下面举个例子说明一下参数的用法，我用现在特别火的几个孩子定义了一个数组：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$scope.childrenArray = [</div><div class="line">        &#123;<span class="attr">name</span>:<span class="string">'kimi'</span>,<span class="attr">age</span>:<span class="number">3</span>&#125;,</div><div class="line">        &#123;<span class="attr">name</span>:<span class="string">'cindy'</span>,<span class="attr">age</span>:<span class="number">4</span>&#125;,</div><div class="line">        &#123;<span class="attr">name</span>:<span class="string">'anglar'</span>,<span class="attr">age</span>:<span class="number">4</span>&#125;,</div><div class="line">        &#123;<span class="attr">name</span>:<span class="string">'shitou'</span>,<span class="attr">age</span>:<span class="number">6</span>&#125;,</div><div class="line">        &#123;<span class="attr">name</span>:<span class="string">'tiantian'</span>,<span class="attr">age</span>:<span class="number">5</span>&#125;</div><div class="line">];</div><div class="line"></div><div class="line">    $scope.func = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.age&gt;<span class="number">4</span>;&#125;&#123;&#123; childrenArray | filter : <span class="string">'a'</span> &#125;&#125; <span class="comment">//匹配属性值中含有a的</span></div><div class="line">    &#123;&#123; childrenArray | filter : <span class="number">4</span> &#125;&#125;  <span class="comment">//匹配属性值中含有4的</span></div><div class="line">    &#123;&#123; childrenArray | filter : &#123;<span class="attr">name</span> : <span class="string">'i'</span>&#125; &#125;&#125; <span class="comment">//参数是对象，匹配name属性中含有i的</span></div><div class="line">    &#123;&#123;childrenArray | filter : func &#125;&#125;  <span class="comment">//参数是函数，指定返回age&gt;4的</span></div></pre></td></tr></table></figure>
<h3 id="4-json-格式化json对象"><a href="#4-json-格式化json对象" class="headerlink" title="4. json(格式化json对象)"></a>4. json(格式化json对象)</h3><p>&#160; &#160; &#160; &#160;json过滤器可以把一个js对象格式化为json字符串，没有参数。这东西有什么用呢，我一般也不会在页面上输出一个json串啊，官网说它可以用来进行调试，嗯，是个不错的选择。或者，也可以用在js中使用，作用就和我们熟悉的JSON.stringify()一样。用法超级简单：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; jsonTest | json&#125;&#125;</div></pre></td></tr></table></figure>
<h3 id="5-limitTo-限制数组长度或字符串长度"><a href="#5-limitTo-限制数组长度或字符串长度" class="headerlink" title="5. limitTo(限制数组长度或字符串长度)"></a>5. limitTo(限制数组长度或字符串长度)</h3><p>&#160; &#160; &#160; &#160;limitTo过滤器用来截取数组或字符串，接收一个参数用来指定截取的长度，如果参数是负值，则从数组尾部开始截取。个人觉得这个filter有点鸡肋，首先只能从数组或字符串的开头/尾部进行截取，其次，js原生的函数就可以代替它了，看看怎么用吧：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; childrenArray | limitTo : <span class="number">2</span> &#125;&#125;  <span class="comment">//将会显示数组中的前两项</span></div></pre></td></tr></table></figure>
<p>　　</p>
<h3 id="6-lowercase-小写"><a href="#6-lowercase-小写" class="headerlink" title="6. lowercase(小写)"></a>6. lowercase(小写)</h3><p>&#160; &#160; &#160; &#160;把数据转化为全部小写。太简单了，不多解释。同样是很鸡肋的一个filter，没有参数，只能把整个字符串变为小写，不能指定字母。怎么用我都懒得写了。</p>
<h3 id="7-uppercase-大写"><a href="#7-uppercase-大写" class="headerlink" title="7. uppercase(大写)"></a>7. uppercase(大写)</h3><p>同上。</p>
<h3 id="8-number-格式化数字"><a href="#8-number-格式化数字" class="headerlink" title="8. number(格式化数字)"></a>8. number(格式化数字)</h3><p>&#160; &#160; &#160; &#160;number过滤器可以为一个数字加上千位分割，像这样，123,456,789。同时接收一个参数，可以指定float类型保留几位小数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; num | number : <span class="number">2</span> &#125;&#125;</div></pre></td></tr></table></figure>
<p>　　</p>
<h3 id="9-orderBy-排序"><a href="#9-orderBy-排序" class="headerlink" title="9. orderBy(排序)"></a>9. orderBy(排序)</h3><p>&#160; &#160; &#160; &#160;orderBy过滤器可以将一个数组中的元素进行排序，接收一个参数来指定排序规则，参数可以是一个字符串，表示以该属性名称进行排序。可以是一个函数，定义排序属性。还可以是一个数组，表示依次按数组中的属性值进行排序（若按第一项比较的值相等，再按第二项比较），还是拿上面的孩子数组举例：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;&#123;&#123; childrenArray | orderBy : 'age' &#125;&#125;&lt;/div&gt;      //按age属性值进行排序，若是-age，则倒序</div><div class="line">&lt;div&gt;&#123;&#123; childrenArray | orderBy : orderFunc &#125;&#125;&lt;/div&gt;   //按照函数的返回值进行排序</div><div class="line">&lt;div&gt;&#123;&#123; childrenArray | orderBy : ['age','name'] &#125;&#125;&lt;/div&gt;  //如果age相同，按照name进行排序　　内置的过滤器介绍</div></pre></td></tr></table></figure>
<p>&#160; &#160; &#160; &#160;完了，写的我都快睡着了。。。正如你所看到的，ng内置的过滤器也并不是万能的，事实上好多都比较鸡肋。更个性化的需求就需要我们来定义自己的过滤器了，下面来看看如何自定义过滤器。</p>
<h2 id="3-自定义过滤器及示例"><a href="#3-自定义过滤器及示例" class="headerlink" title="3.自定义过滤器及示例"></a>3.自定义过滤器及示例</h2><p>&#160; &#160; &#160; &#160;filter的自定义方式也很简单，使用module的filter方法，返回一个函数，该函数接收<br>输入值，并返回处理后的结果。话不多说，我们来写一个看看。比如我需要一个过滤器，它可以返回一个数组中下标为奇数的元素，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">app.filter(<span class="string">'odditems'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">inputArray</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> array = [];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;inputArray.length;i++)&#123;</div><div class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>!==<span class="number">0</span>)&#123;</div><div class="line">                array.push(inputArray[i]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> array;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>&#160; &#160; &#160; &#160;格式就是这样，你的处理逻辑就写在内部的那个闭包函数中。你也可以让自己的过滤器接收参数，参数就定义在return的那个函数中，作为第二个参数，或者更多个参数也可以。</p>
<p>&#160; &#160; &#160; &#160;格式就是这样，你的处理逻辑就写在内部的那个闭包函数中。你也可以让自己的过滤器接收参数，参数就定义在return的那个函数中，作为第二个参数，或者更多个参数也可以。<br>自定义过滤器实例（例04）:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* View html */</span></div><div class="line">First name：&lt;input ng-model=<span class="string">"user.firstName"</span>/&gt;<span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></div><div class="line">Last  name：&lt;input ng-model=<span class="string">"user.lastName"</span>/&gt; <span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></div><div class="line">First name：&#123;&#123;user.firstName&#125;&#125;      Last  name：&#123;&#123;user.lastName&#125;&#125; &lt;br/&gt;</div><div class="line">Fullname：&#123;&#123;user | flFullname&#125;&#125;&lt;br/&gt;</div><div class="line">Fullname：&#123;&#123;user | flFullname:<span class="string">"－"</span>&#125;&#125;&lt;br/&gt;</div><div class="line">Fullname：&#123;&#123;user | flFullname:<span class="string">"•"</span> | uppercase &#125;&#125;</div><div class="line"><span class="comment">/* Controller js */</span></div><div class="line">demoApp.filter(<span class="string">"flFullname"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">user, sep</span>) </span>&#123;</div><div class="line">        sep = sep || <span class="string">" "</span>;</div><div class="line">        user = user || &#123;&#125;;</div><div class="line">        fullName = <span class="string">""</span>;</div><div class="line">        <span class="keyword">if</span>(user.firstName)&#123;fullName += user.firstName;&#125;</div><div class="line">        <span class="keyword">if</span>(user.lastName)&#123;fullName = fullName + sep + user.lastName;&#125;</div><div class="line">        <span class="keyword">if</span>(fullName &amp;&amp; fullName.length&gt;<span class="number">0</span>)&#123;<span class="keyword">return</span> fullName;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;<span class="keyword">return</span> <span class="string">""</span>;&#125;</div><div class="line">    &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      本文主要介绍了AngularJS中的内置过滤器的功能，以及如何自定义自己的过滤器
    
    </summary>
    
      <category term="AngularJS" scheme="http://yoursite.com/categories/AngularJS/"/>
    
    
      <category term="angularjs" scheme="http://yoursite.com/tags/angularjs/"/>
    
      <category term="前端框架" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
      <category term="angular过滤器" scheme="http://yoursite.com/tags/angular%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>angularjs(五)</title>
    <link href="http://yoursite.com/2017/04/25/angular-5/"/>
    <id>http://yoursite.com/2017/04/25/angular-5/</id>
    <published>2017-04-25T05:17:02.000Z</published>
    <updated>2017-05-14T14:15:19.600Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正文开始"><a href="#正文开始" class="headerlink" title="正文开始"></a>正文开始</h1><p><center style="font-size: 30px"><code>过滤器</code></center></p>
<hr>
<h2 id="指令-directive"><a href="#指令-directive" class="headerlink" title="指令(directive)"></a>指令(directive)</h2><p>&#160; &#160; &#160; &#160;通过使用模板，我们可以把model和controller中的数据组装起来呈现给浏览器，还可以通过数据绑定，实时更新视图，让我们的页面变成动态的。</p>
<p>模板中可以使用的东西包括以下四种：</p>
<ol>
<li><code>指令</code>(directive)：ng提供的或者自定义的标签和属性，用来增强HTML表现力；</li>
<li><code>标记</code>(markup)：即双大括号，可将数据单向绑定到HTML中；</li>
<li><code>过滤器</code>(filter)：用来格式化输出数据；</li>
<li><code>表单控制</code>：用来增强表单的验证功能。</li>
</ol>
<p>&#160; &#160; &#160; &#160;其中，指令无疑是使用量最大的，ng内置了很多指令用来控制模板，如ng-repeat，ng-class，也有很多指令来帮你完成业务逻辑，如ng-controller,ng-model。</p>
<p>指令的几种使用方式如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">l 作为标签：<span class="tag">&lt;<span class="name">my-dir</span>&gt;</span><span class="tag">&lt;/<span class="name">my-dir</span>&gt;</span></div><div class="line">l 作为属性：<span class="tag">&lt;<span class="name">span</span> <span class="attr">my-dir</span>=<span class="string">"exp"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">l 作为注释：<span class="comment">&lt;!-- directive: my-dir exp --&gt;</span></div><div class="line">l 作为类名：<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"my-dir: exp;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure>
<p>其实常用的就是作为标签和属性。</p>
<h2 id="1-样式相关的指令"><a href="#1-样式相关的指令" class="headerlink" title="1.样式相关的指令"></a>1.样式相关的指令</h2><p>&#160; &#160; &#160; &#160;既然模板就是普通的HTML，那我首要关心的就是样式的控制，元素的定位、字体、背景色等等如何可以灵活控制。下面来看看常用的样式控制指令。</p>
<h3 id="1-1-ng-class"><a href="#1-1-ng-class" class="headerlink" title="1.1  ng-class"></a>1.1  ng-class</h3><p>&#160; &#160; &#160; &#160;ng-class用来给元素绑定类名，其表达式的返回值可以是以下三种：</p>
<ol>
<li><code>类名字符串，可以用空格分割多个类名，如’redtext boldtext’；_</code></li>
<li><code>类名数组，数组中的每一项都会层叠起来生效；_</code></li>
<li><code>一个名值对应的map，其键值为类名，值为boolean类型，当值为true时，该类会被加在元素上。_</code></li>
</ol>
<p>&#160; &#160; &#160; &#160;下面来看一个使用map的例子：<br><em>ng-class测试</em><br>红色 加粗 删除线 </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">map:&#123;<span class="attr">redtext</span>:&#123;&#123;red&#125;&#125;, <span class="attr">boldtext</span>:&#123;&#123;bold&#125;&#125;, <span class="attr">striketext</span>:&#123;&#123;strike&#125;&#125;&#125;</div></pre></td></tr></table></figure>
<p>&#160; &#160; &#160; &#160;如果你想拼接一个类名出来，可以使用插值表达式，如：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">　　<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">”&#123;&#123;style&#125;&#125;text”</span>&gt;</span>字体样式测试<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后在controller中指定style的值：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">　　$scope.style = ‘red’;</div></pre></td></tr></table></figure>
<p>&#160; &#160; &#160; &#160;注意我用了<code>class</code>而不是ng-class，这是不可以对换的，官方的文档也未做说明，姑且认为这是ng的语法规则吧。<br>&#160; &#160; &#160; &#160;与ng-class相近的，ng还提供了ng-class-odd、ng-class-even两个指令，用来配合ng-repeat分别在奇数列和偶数列使用对应的类。这个用来在表格中实现隔行换色再方便不过了。</p>
<h3 id="1-2-ng-style"><a href="#1-2-ng-style" class="headerlink" title="1.2 ng-style"></a>1.2 ng-style</h3><p>&#160; &#160; &#160; &#160;ng-style用来绑定元素的css样式，其表达式的返回值为一个js对象，键为css样式名，值为该样式对应的合法取值。用法比较简单：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-style</span>=<span class="string">"&#123;color:'red'&#125;"</span>&gt;</span>ng-style测试<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;div ng-style="style"&gt;ng-style测试&lt;/div&gt;</div><div class="line">$scope.style = &#123;color:'red'&#125;;</div></pre></td></tr></table></figure>
<h3 id="1-3-ng-show，ng-hide"><a href="#1-3-ng-show，ng-hide" class="headerlink" title="1.3  ng-show，ng-hide"></a>1.3  ng-show，ng-hide</h3><p>&#160; &#160; &#160; &#160;对于比较常用的元素显隐控制，ng也做了封装，ng-show和ng-hide的值为boolean类型的表达式，当值为true时，对应的show或hide生效。框架会用display:block和display:none来控制元素的显隐。</p>
<h2 id="2-表单控件功能相关指令"><a href="#2-表单控件功能相关指令" class="headerlink" title="2.表单控件功能相关指令"></a>2.表单控件功能相关指令</h2><ul>
<li>对于常用的表单控件功能，ng也做了封装，方便灵活控制。</li>
<li>ng-checked控制radio和checkbox的选中状态</li>
<li>ng-selected控制下拉框的选中状态</li>
<li>ng-disabled控制失效状态</li>
<li>ng-multiple控制多选</li>
<li>ng-readonly控制只读状态</li>
<li>以上指令的取值均为boolean类型，当值为true时相关状态生效，道理比较简单就不多做解释。注意： 上面的这些只是单向绑定，即只是从数据到模板，不能反作用于数据。要双向绑定，还是要使用 ng-model 。</li>
</ul>
<h2 id="3-事件绑定相关指令"><a href="#3-事件绑定相关指令" class="headerlink" title="3.事件绑定相关指令"></a>3.事件绑定相关指令</h2><p>&#160; &#160; &#160; &#160;事件绑定是javascrpt中比较重要的一部分内容，ng对此也做了详细的封装，正如我们之前使用过的ng-click一样，事件的指令如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">-    ng-click</div><div class="line">　-　ng-change</div><div class="line">　-　ng-dblclick</div><div class="line">　-　ng-mousedown</div><div class="line">　-　ng-mouseenter</div><div class="line">　-　ng-mouseleave</div><div class="line">　-　ng-mousemove</div><div class="line">　-　ng-mouseover</div><div class="line">　-　ng-mouseup</div><div class="line">　-　ng-submit</div></pre></td></tr></table></figure>
<p>&#160; &#160; &#160; &#160;事件绑定指令的取值为函数，并且需要加上括号，例如：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">ng-change</span>=<span class="string">”change($event)”</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后在<code>controller</code>中定义如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$scope.change = <span class="function"><span class="keyword">function</span>(<span class="params">$event</span>)</span>&#123;</div><div class="line">         alert($event.target);</div><div class="line">         <span class="comment">//……………………</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　<br>&#160; &#160; &#160; &#160;在模板中可以用变量<code>$event</code>将事件对象传递到<code>controller</code>中。<br>对于ng的这种设计，一些人有所质疑，视图与事件绑定混在一起到底好不好？我们不是要讲究视图与逻辑分离吗？如此一来，把事件的绑定又变回了内联的，岂不是历史的倒退。我也一样对此表示不解，因为不写onclick已经很多年。。。但既然已经存在了，我们不妨往合理的方向上想一想，或许ng的设计者压根就不想让模板成为单纯的视图层，本来就是想增强HTML，让它有一点业务能力。这么想的话似乎也能想通，好吧，先欺骗一下自己吧~</p>
<h3 id="特殊的ng-src和ng-href"><a href="#特殊的ng-src和ng-href" class="headerlink" title="特殊的ng-src和ng-href"></a>特殊的ng-src和ng-href</h3><p>在说明这两个指令的特殊之前，需要先了解一下ng的启动及执行过程，如下图：</p>
<p>1) 浏览器加载静态HTML文件并解析为DOM；<br>2) 浏览器加载angular.js文件；<br>3) angular监听DOMContentLoaded 事件，监听到时开始启动；<br>4) angular寻找ng-app指令，确定作用范围；<br>5) 找到app中定义的Module使用$injector服务进行依赖注入；<br>6) 根据$injector服务创建$compile服务用于编译；<br>7) $compile服务编译DOM中的指令、过滤器等；<br>8) 使用ng-init指令，将作用域中的变量进行替换；<br>9) 最后生成了我们在最终视图。<br>&#160; &#160; &#160; &#160;可以看到，ng框架是在DOMcontent加载完毕后才开始发挥作用。假如我们模板中有一张图片如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">　　<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://m.cnblogs.com/142260/”&#123;&#123;imgUrl&#125;&#125;” /&gt;</span></span></div></pre></td></tr></table></figure>
<p>&#160; &#160; &#160; &#160;那么在页面开始加载到ng编译完成之前，页面上会一直显示一张错误的图片，因为路径{&nbsp;{imgUrl}&nbsp;}还未被替换。</p>
<p>&#160; &#160; &#160; &#160;为了避免这种情况，我们使用ng-src指令，这样在路径被正确得到之前就不会显示找不到图片。同理，h标签的href属性也需要换成ng-href，这样页面上就不会先出现一个地址错误的链接。</p>
<p>&#160; &#160; &#160; &#160;顺着这个思路再多想一点，我们在模板中使用{&nbsp;{}}显示数据时，在ng编译完成之前页面上岂不是会显示出大括号及里面的表达式？确实是这样。为了避免这个，ng中有一个与{&nbsp;{}}等同的指令:ng-bind，同样用于单向绑定，在页面刚加载的时候就不会显示出对用户无用的数据了。尽管这样你可能不但没舒心反而更纠结了，{&nbsp;{}}那么好用易理解，还不能用了不成？好消息是我们依然可以使用。因为我编写的是单页面应用，页面只会在加载index.html的时</p>
<p>&#160; &#160; &#160; &#160;候出这个问题，只需在index.html中的模板中换成ng-bind就行。其他的模板是我们动态加载的，就可以放心使用{&nbsp;{}}了。</p>
<h3 id="4-自定义指令示例"><a href="#4-自定义指令示例" class="headerlink" title="4.自定义指令示例"></a>4.自定义指令示例</h3><p>&#160; &#160; &#160; &#160;下面我们来解析下指令的例子。</p>
<ol>
<li>首先，我们定义一个名为userInfo的指令：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">demoApp.directive(<span class="string">'userInfo'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">restrict</span> : <span class="string">'E'</span>,</div><div class="line">        <span class="attr">templateUrl</span> : <span class="string">'userInfoTemplate.html'</span>,</div><div class="line">        <span class="attr">replace</span> : <span class="literal">true</span>,</div><div class="line">        <span class="attr">transclude</span> : <span class="literal">true</span>,</div><div class="line">        <span class="attr">scope</span> : &#123;</div><div class="line">            <span class="attr">mytitle</span> : <span class="string">'=etitle'</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">link</span> : <span class="function"><span class="keyword">function</span>(<span class="params">scope,element,attrs</span>)</span>&#123;</div><div class="line">            scope.showText = <span class="literal">false</span>;</div><div class="line">            scope.toggleText = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                scope.showText = ! scope.showText;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ul>
<li><code>Restrict</code>为’E’：用作标签；</li>
<li><code>replace</code>为true：用模板替换当前标签；</li>
<li><code>transclude</code>为true：将当前元素的内容转移到模板中；</li>
<li><code>scope</code> 为 {mytitle : ‘=etitle’}：定义一个名为mytitle的MODEL，其值指向当前元素的etitle属性；templateUrl为’userInfoTemplate.html’：模板内容为ng-template定义ID为userInfoTemplate.html的内容；</li>
<li><code>link</code>：指定所包含的行为。link属性值为一个函数,这个函数有五个参数:scope,iEle,iAttrs,ctrl,linker</li>
</ul>
<ol>
<li>userInfoTemplate.html模板为：</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/ng-template"</span> <span class="attr">id</span>=<span class="string">"userInfoTemplate.html"</span>&gt;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mybox"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mytitle"</span> <span class="attr">style</span>=<span class="string">"cursor: pointer;"</span> <span class="attr">ng-click</span>=<span class="string">"toggleText()"</span>&gt;</span></div><div class="line">            &#123; &#123;mytitle&#125; &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-transclude</span> <span class="attr">ng-show</span>=<span class="string">"showText"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>将当前元素的内容添加到有ng-transclude属性的这个DIV下，默认是隐藏的。</p>
<ol>
<li>Controller信息：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">demoApp.controller(<span class="string">"test7Controller"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</div><div class="line">    $scope.title = <span class="string">'个人简介'</span>;</div><div class="line">    $scope.text = <span class="string">'大家好，我正在研究AngularJs，欢迎大家与我交流。'</span>;</div><div class="line">    $scope.updateInfo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">    $scope.title = <span class="string">'个人信息'</span>;</div><div class="line">    $scope.text = <span class="string">'大家好，今天天气真好！'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ol>
<li>指令使用方式（View信息）为：</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">user-info</span> <span class="attr">etitle</span>=<span class="string">"title"</span>&gt;</span>&#123; &#123;text&#125; &#125;<span class="tag">&lt;/<span class="name">user-info</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Etitle指向Controller中的$scope.title。注意命名方式：指令名为<code>userInfo</code>，对应的标签为<code>user-info</code>。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>指令是angular里面核心的功能，日常的学习和开发中也是使用不同指令去完成各种不同的需求，尤其<code>自定义指令</code>尤使用的频率极高，应该好好的掌握！</p>
]]></content>
    
    <summary type="html">
    
      本文主要介绍了AngularJS中的指令的概念，以及常用的指令
    
    </summary>
    
      <category term="AngularJS" scheme="http://yoursite.com/categories/AngularJS/"/>
    
    
      <category term="angularjs" scheme="http://yoursite.com/tags/angularjs/"/>
    
      <category term="前端框架，angular指令" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%EF%BC%8Cangular%E6%8C%87%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>angular(八)</title>
    <link href="http://yoursite.com/2017/04/25/angular_8/"/>
    <id>http://yoursite.com/2017/04/25/angular_8/</id>
    <published>2017-04-25T05:17:02.000Z</published>
    <updated>2017-05-14T14:15:36.220Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h1 id="正文开始"><a href="#正文开始" class="headerlink" title="正文开始"></a>正文开始</h1><p><center style="font-size: 30px"><code>路由DI</code></center></p>
<hr>
<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><h3 id="路由介绍"><a href="#路由介绍" class="headerlink" title="路由介绍"></a>路由介绍</h3><p>&#160; &#160; &#160; &#160;在谈路由机制前有必要先提一下现在比较流行的单页面应用，就是所谓的single page APP。为了实现无刷新的视图切换，我们通常会用ajax请求从后台取数据，然后套上HTML模板渲染在页面上，然而ajax的一个致命缺点就是导致浏览器后退按钮失效，尽管我们可以在页面上放一个大大的返回按钮，让用户点击返回来导航，但总是无法避免用户习惯性的点后退。解决此问题的一个方法是使用hash，监听hashchange事件来进行视图切换，另一个方法是用HTML5的history API，通过pushState()记录操作历史，监听popstate事件来进行视图切换，也有人把这叫pjax技术。基本流程如下：</p>
<p>&#160; &#160; &#160; &#160;如此一来，便形成了通过地址栏进行导航的深度链接（deeplinking ），也就是我们所需要的路由机制。通过路由机制，一个单页应用的各个视图就可以很好的组织起来了。</p>
<h3 id="ngRoute内容"><a href="#ngRoute内容" class="headerlink" title="ngRoute内容"></a>ngRoute内容</h3><p>&#160; &#160; &#160; &#160;ng的路由机制是靠ngRoute提供的，通过hash和history两种方式实现了路由，可以检测浏览器是否支持history来灵活调用相应的方式。ng的路由(ngRoute)是一个单独的模块，包含以下内容：</p>
<ul>
<li><p>服务$routeProvider用来定义一个路由表，即地址栏与视图模板的映射</p>
</li>
<li><p>服务$routeParams保存了地址栏中的参数，例如</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="attr">id</span> : <span class="number">1</span>, <span class="attr">name</span> : <span class="string">'tom'</span>&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>服务$route完成路由匹配，并且提供路由相关的属性访问及事件，如访问当前路由对应的controller</p>
</li>
<li><p>指令ngView用来在主视图中指定加载子视图的区域<br>　以上内容再加上$location服务，我们就可以实现一个单页面应用了。下面来看一下具体如何使用这些内容。</p>
</li>
</ul>
<h3 id="ng的路由机制"><a href="#ng的路由机制" class="headerlink" title="ng的路由机制"></a>ng的路由机制</h3><h4 id="第一步：引入文件和依赖"><a href="#第一步：引入文件和依赖" class="headerlink" title="第一步：引入文件和依赖"></a>第一步：引入文件和依赖</h4><p>&#160; &#160; &#160; &#160;ngRoute模块包含在一个单独的文件中，所以第一步需要在页面上引入这个文件，如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;script src=<span class="string">"http://code.angularjs.org/1.2.8/angular.min.js"</span> rel=<span class="string">"nofollow"</span>/&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://code.angularjs.org/1.2.8/angular-route.min.js"</span> <span class="attr">rel</span>=<span class="string">"nofollow"</span>/&gt;</span><span class="undefined"></span></span></div></pre></td></tr></table></figure>
<p>　<br>&#160; &#160; &#160; &#160;光引入还不够，我们还需在模块声明中注入对ngRoute的依赖，如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = angular.module(<span class="string">'MyApp'</span>, [<span class="string">'ngRoute'</span>]);</div></pre></td></tr></table></figure>
<p>&#160; &#160; &#160; &#160;完成了这些，我们就可以在模板或是controller中使用上面的服务和指令了。下面我们需要定义一个路由表。</p>
<h4 id="第二步：定义路由表"><a href="#第二步：定义路由表" class="headerlink" title="第二步：定义路由表"></a>第二步：定义路由表</h4><p>&#160; &#160; &#160; &#160;$routeProvider提供了定义路由表的服务，它有两个核心方法，when(path,route)和otherwise(params)，先看一下核心中的核心when(path,route)方法。<br>&#160; &#160; &#160; &#160;when(path,route)方法接收两个参数，path是一个string类型，表示该条路由规则所匹配的路径，它将与地址栏的内容($location.path)值进行匹配。如果需要匹配参数，可以在path中使用冒号加名称的方式，如：path为/show/:name，如果地址栏是/show/tom，那么参数name和所对应的值tom便会被保存在$routeParams中，像这样：{name : tom}。我们也可以用<code>*</code>进行模糊匹配，如：/show*/:name将匹配/showInfo/tom。</p>
<p>&#160; &#160; &#160; &#160;route参数是一个object，用来指定当path匹配后所需的一系列配置项，包括以下内容：</p>
<ul>
<li>controller //function或string类型。在当前模板上执行的controller函数，生成新的scope；</li>
<li>controllerAs //string类型，为controller指定别名；</li>
<li>template //string或function类型，视图z所用的模板，这部分内容将被ngView引用；</li>
<li>templateUrl //string或function类型，当视图模板为单独的html文件或是使用了<br><code>&lt;script type=&quot;text/ng-template&quot;&gt;</code><br>定义模板时使用；</li>
<li>resolve //指定当前controller所依赖的其他模块；</li>
<li>redirectTo //重定向的地址。</li>
</ul>
<p>最简单情况，我们定义一个html文件为模板，并初始化一个指定的controller：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">emailRouteConfig</span>(<span class="params">$routeProvider</span>)</span>&#123;</div><div class="line">    $routeProvider.when(<span class="string">'/show'</span>, &#123;</div><div class="line">        <span class="attr">controller</span>: ShowController,</div><div class="line">        <span class="attr">templateUrl</span>: <span class="string">'show.html'</span></div><div class="line">    &#125;).</div><div class="line">    when(<span class="string">'/put/:name'</span>,&#123;</div><div class="line">       <span class="attr">controller</span>: PutController,</div><div class="line">       <span class="attr">templateUrl</span>: <span class="string">'put.html'</span></div><div class="line">    &#125;)</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>&#160; &#160; &#160; &#160;otherwise(params)方法对应路径匹配不到时的情况，这时候我们可以配置一个redirectTo参数，让它重定向到404页面或者是首页。</p>
<h4 id="第三步：在主视图模板中指定加载子视图的位置"><a href="#第三步：在主视图模板中指定加载子视图的位置" class="headerlink" title="第三步：在主视图模板中指定加载子视图的位置"></a>第三步：在主视图模板中指定加载子视图的位置</h4><p>&#160; &#160; &#160; &#160;我们的单页面程序都是局部刷新的，那这个“局部”是哪里呢，这就轮到ngView出马了，只需在模板中简单的使用此指令，在哪里用，哪里就是“局部”。例如：<br><code>&lt;div ng-view&gt;&lt;/div&gt;</code>　　或：<code>&lt;ng-view&gt;&lt;/ng-view&gt;</code>　</p>
<p>&#160; &#160; &#160; &#160;我们的子视图将会在此处被引入进来。完成这三步后，你的程序的路由就配置好了。</p>
<h3 id="路由示例"><a href="#路由示例" class="headerlink" title="路由示例"></a>路由示例</h3><p>&#160; &#160; &#160; &#160;下面我们将用一个例子（例09）来说明路由的使用方式及步骤：</p>
<p>1.为demoApp添加一个路由，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">demoApp.config([<span class="string">'$routeProvider'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$routeProvider</span>) </span>&#123;  </div><div class="line">$routeProvider.when(<span class="string">'/list'</span>, &#123;  </div><div class="line"><span class="attr">templateUrl</span>: <span class="string">'route/list.html'</span>,  </div><div class="line">  <span class="attr">controller</span>: <span class="string">'routeListController'</span></div><div class="line">&#125;).when(<span class="string">'/list/:id'</span>, &#123;  </div><div class="line">  <span class="attr">templateUrl</span>: <span class="string">'route/detail.html'</span>,</div><div class="line">   <span class="attr">controller</span>: <span class="string">'routeDetailController'</span></div><div class="line">  &#125;).otherwise(&#123;  </div><div class="line">        <span class="attr">redirectTo</span>: <span class="string">'/list'</span>  </div><div class="line">     &#125;);  </div><div class="line">&#125;]);</div></pre></td></tr></table></figure>
<p>/list 对应为：route/list.html页面，显示用户列表；/list/:id对应于route/detail.html页面，显示用户详细信息。</p>
<p>2.为list.html和detail.html分别声明Controller：routeListController和routeDetailController。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">demoApp.controller(<span class="string">'routeListController'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>) </span>&#123;  </div><div class="line">$scope.users = [&#123;<span class="attr">userId</span>:<span class="string">"zhangsan"</span>,<span class="attr">userName</span>:<span class="string">"张三"</span>,<span class="attr">userInfo</span>:<span class="string">"我是张三，我为自己带盐！"</span>&#125;,</div><div class="line">&#123;<span class="attr">userId</span>:<span class="string">"lisi"</span>,<span class="attr">userName</span>:<span class="string">"李四"</span>,<span class="attr">userInfo</span>:<span class="string">"我是李四，我为卿狂！"</span>&#125;,</div><div class="line">&#123;<span class="attr">userId</span>:<span class="string">"woshishui"</span>,<span class="attr">userName</span>:<span class="string">"我是谁"</span>,<span class="attr">userInfo</span>:<span class="string">"我是谁！我是谁！我是谁！"</span>&#125;];</div><div class="line"> </div><div class="line">&#125;);  </div><div class="line">demoApp.controller(<span class="string">'routeDetailController'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope, $routeParams, userService</span>) </span>&#123;  </div><div class="line">    $scope.userDetail = userService.getUser($routeParams.id);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>routeDetailController中如上面提到的一样，注入了userService服务，在这里直接拿来用。</p>
<p>3.创建list.html和detail.html页面，代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>Route : List.html（用户列表页面）<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"user in users"</span>&gt;</span>  </div><div class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://m.cnblogs.com/142260/3817063.html?full=1#/list/&#123;&#123; user.userId &#125;&#125;"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">rel</span>=<span class="string">"nofollow"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>Route : detail.html（用户详细信息页面）<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>用户名：<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color: red;"</span>&gt;</span>&#123;&#123;userDetail.userName&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>用户ID：&#123;&#123;userDetail.userId&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>用户名：&#123;&#123;userDetail.userName&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">用户简介：<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;userDetail.userInfo&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://m.cnblogs.com/142260/3817063.html?full=1#/list"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">rel</span>=<span class="string">"nofollow"</span>&gt;</span>返回<span class="tag">&lt;/<span class="name">a</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<ol>
<li>路由局部刷新位置：</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>AngularJS路由（Route） 示例<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-view</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      本文主要介绍了angular中依赖注入DI
    
    </summary>
    
      <category term="AngularJS" scheme="http://yoursite.com/categories/AngularJS/"/>
    
    
      <category term="angularjs" scheme="http://yoursite.com/tags/angularjs/"/>
    
      <category term="前端框架" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
      <category term="angular路由" scheme="http://yoursite.com/tags/angular%E8%B7%AF%E7%94%B1/"/>
    
  </entry>
  
  <entry>
    <title>angular(六)</title>
    <link href="http://yoursite.com/2017/04/25/angular_6/"/>
    <id>http://yoursite.com/2017/04/25/angular_6/</id>
    <published>2017-04-25T05:17:02.000Z</published>
    <updated>2017-05-14T14:15:45.899Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h1 id="正文开始"><a href="#正文开始" class="headerlink" title="正文开始"></a>正文开始</h1><p><center style="font-size: 30px"><code>服务</code></center></p>
<hr>
<h2 id="服务（service）"><a href="#服务（service）" class="headerlink" title="服务（service）"></a>服务（service）</h2><h3 id="服务介绍"><a href="#服务介绍" class="headerlink" title="服务介绍"></a>服务介绍</h3><p>&#160; &#160; &#160; &#160;服务这个概念其实并不陌生，在其他语言中如Java便有这样的概念，其作用就是对外提供某个特定的功能，如消息服务，文件压缩服务等，是一个独立的模块。ng的服务是这样定义的：</p>
<ul>
<li>Angular services are singletons objects or functions that carry out specific tasks common to web apps.</li>
</ul>
<p>它是一个单例对象或函数，对外提供特定的功能。<br>首先是一个单例，即无论这个服务被注入到任何地方，对象始终只有一个实例。<br>其次这与我们自己定义一个function然后在其他地方调用不同，因为服务被定义在一个模块中，所以其使用范围是可以被我们管理的。ng的避免全局变量污染意识非常强。</p>
<p>&#160; &#160; &#160; &#160;ng提供了很多内置的服务，可以到API中查看[<a href="http://docs.angularjs.org/api/。" target="_blank" rel="external">http://docs.angularjs.org/api/。</a>]<br>知道了概念，我们来拉一个service出来溜溜，看看到底是个什么用法。　<br>　<br>&#160; &#160; &#160; &#160;我们在controller中直接声明$location服务，这依靠ng的依赖注入机制。$location提供地址栏相关的服务，我们在此只是简单的获取当前的地址。</p>
<p>&#160; &#160; &#160; &#160;服务的使用是如此简单，我们可以把服务注入到controller、指令或者是其他服务中。</p>
<h3 id="自定义服务"><a href="#自定义服务" class="headerlink" title="自定义服务"></a>自定义服务</h3><p>&#160; &#160; &#160; &#160;如同指令一样，系统内置的服务以$开头，我们也可以自己定义一个服务。定义服务的方式有如下几种：</p>
<ul>
<li>使用系统内置的$provide服务；</li>
<li>使用Module的factory方法；</li>
<li>使用Module的service方法。</li>
</ul>
<p>&#160; &#160; &#160; &#160;下面通过一个小例子来分别试验一下。我们定义一个名为remoteData服务，它可以从远程获取数据，这也是我们在程序中经常使用的功能。不过我这里没有远程服务器，就写死一点数据模拟一下。<br>//使用$provide来定义</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用$provide来定义</span></div><div class="line"><span class="keyword">var</span> app = angular.module(<span class="string">'MyApp'</span>, [], <span class="function"><span class="keyword">function</span>(<span class="params">$provide</span>) </span>&#123;</div><div class="line">    $provide.factory(<span class="string">'remoteData'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"> <span class="keyword">var</span> data = &#123;<span class="attr">name</span>:<span class="string">'n'</span>,<span class="attr">value</span>:<span class="string">'v'</span>&#125;;</div><div class="line">        <span class="keyword">return</span> data;</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line"><span class="comment">//使用factory方法</span></div><div class="line">app.factory(<span class="string">'remoteData'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> data = &#123;<span class="attr">name</span>:<span class="string">'n'</span>,<span class="attr">value</span>:<span class="string">'v'</span>&#125;;</div><div class="line">    <span class="keyword">return</span> data;</div><div class="line">&#125;);</div><div class="line"><span class="comment">//使用service方法</span></div><div class="line">app.service(<span class="string">'remoteData'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = <span class="string">'n'</span>;</div><div class="line">    <span class="keyword">this</span>.value = <span class="string">'v'</span>;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>&#160; &#160; &#160; &#160;Module的factory和$provide的factory方法是一模一样的，从官网文档看它们其实就是一回事。至于Module内部是如何调用的，我此处并不打算深究，我只要知道怎么用就好了。</p>
<p>&#160; &#160; &#160; &#160;再看Module的service方法，它没有return任何东西，是因为service方法本身返回一个构造器，系统会自动使用new关键字来创建出一个对象。所以我们看到在构造器函数内可以使用this，这样调用该服务的地方便可以直接通过remoteData.name来访问数据了。</p>
<h3 id="管理服务的依赖关系"><a href="#管理服务的依赖关系" class="headerlink" title="管理服务的依赖关系"></a>管理服务的依赖关系</h3><p>&#160; &#160; &#160; &#160;服务与服务中间可以有依赖关系，例如我们这里定义一个名为validate的服务，它的作用是验证数据是否合法，它需要依赖我们从远程获取数据的服务remoteData。代码如下：</p>
<p> &#160; &#160; &#160; &#160;在factory的参数中，我们可以直接传入服务remoteData，ng的依赖注入机制便帮我们做好了其他工作。不过一定要保证这个参数的名称与服务名称一致，ng是根据名称来识别的。若参数的名次与服务名称不一致，你就必须显示的声明一下，方式如下：</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> app.factory(<span class="string">'validate'</span>,[<span class="string">'remoteData'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">remoteDataService</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(remoteDataService.name==<span class="string">'n'</span>)&#123;</div><div class="line">            alert(<span class="string">'验证通过'</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;]);</div></pre></td></tr></table></figure>
<p>  &#160; &#160; &#160; &#160;我们在controller中注入服务也是同样的道理，使用的名称需要与服务名称一致才可以正确注入。否则，你必须使用$inject来手动指定注入的服务。比如：</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">testC</span>(<span class="params">scope,rd</span>)</span>&#123;</div><div class="line">    scope.getData = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="string">'name：'</span>+rd.name+<span class="string">'   value：'</span>+rd.value);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">testC.$inject = [<span class="string">'$scope'</span>,<span class="string">'remoteData'</span>];</div></pre></td></tr></table></figure>
<p>   &#160; &#160; &#160; &#160;在controller中注入服务，也可以在定义controller时使用数组作为第二个参数，在此处<br>把服务注入进去，这样在函数体中使用不一致的服务名称也是可以的，不过要确保注入的顺序是一致的，如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">app.controller(<span class="string">'testC'</span>,[<span class="string">'$scope'</span>,<span class="string">'remoteData'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope,rd</span>)</span>&#123;</div><div class="line">    $scope.getData = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="string">'name：'</span>+rd.name+<span class="string">'   value：'</span>+rd.value);</div><div class="line">    &#125;</div><div class="line">&#125;]);</div></pre></td></tr></table></figure>
<h3 id="自定义服务示例"><a href="#自定义服务示例" class="headerlink" title="自定义服务示例"></a>自定义服务示例</h3><p>&#160; &#160; &#160; &#160;接下来让我们看下例子（例08 自定义服务）代码，自定义userService服务：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">demoApp.factory(<span class="string">'userService'</span>, [<span class="string">'$http'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$http</span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> doGetUser = <span class="function"><span class="keyword">function</span>(<span class="params">userId, path</span>) </span>&#123;</div><div class="line"><span class="comment">//return $http(&#123;</span></div><div class="line"><span class="comment">//method: 'JSONP',</span></div><div class="line"><span class="comment">//url: path</span></div><div class="line"><span class="comment">//&#125;);</span></div><div class="line"><span class="comment">/*手动指定数据*/</span></div><div class="line"><span class="keyword">var</span> data = &#123;<span class="attr">userId</span>:<span class="string">"woshishui"</span>,<span class="attr">userName</span>:<span class="string">"我是谁"</span>,<span class="attr">userInfo</span>:<span class="string">"我是谁！我是谁！"</span>&#125;;;</div><div class="line"><span class="keyword">if</span>(userId==<span class="string">'zhangsan'</span>)&#123;</div><div class="line">data = &#123;<span class="attr">userId</span>:<span class="string">"zhangsan"</span>,<span class="attr">userName</span>:<span class="string">"张三"</span>,<span class="attr">userInfo</span>:<span class="string">"我是张三，我为自己"</span>&#125;;</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(userId==<span class="string">'lisi'</span>)&#123;</div><div class="line">data = &#123;<span class="attr">userId</span>:<span class="string">"lisi"</span>,<span class="attr">userName</span>:<span class="string">"李四"</span>,<span class="attr">userInfo</span>:<span class="string">"我是李四，我为卿狂！"</span>&#125;;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> data;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> &#123;</div><div class="line"><span class="comment">/*userService对外暴露的函数，可有多个*/</span></div><div class="line">getUser: <span class="function"><span class="keyword">function</span>(<span class="params">userId</span>) </span>&#123; </div><div class="line"><span class="keyword">return</span> doGetUser(userId, <span class="string">'../xxx/xxx.action'</span>); </div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;]);</div></pre></td></tr></table></figure>
<p>&#160; &#160; &#160; &#160;我们创建了一个只有一个方法的userService，getUser为这个服务从后台获取用户信息的函数，并且对外暴露。当然，由于这是一个静态的例子，无法访问后台，那么我们便制定其返回的数据。</p>
<p>&#160; &#160; &#160; &#160;然后我们把这个服务添加到我们的controller中。我们建立一个controller并加载（或者注入）userService作为运行时依赖，我们把service的名字作为参数传递给controller 函数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">demoApp.controller(<span class="string">"test8Controller"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope,userService</span>)</span>&#123;</div><div class="line"><span class="comment">/*文章信息*/</span></div><div class="line">$scope.articles = [&#123;</div><div class="line"><span class="attr">title</span> : <span class="string">"爱飞像风"</span>,</div><div class="line"><span class="attr">userId</span> : <span class="string">"zhangsan"</span>,</div><div class="line"><span class="attr">userName</span> : <span class="string">"张三"</span></div><div class="line">&#125;,&#123;</div><div class="line"><span class="attr">title</span> : <span class="string">"无法停止的雨"</span>,</div><div class="line"><span class="attr">userId</span> : <span class="string">"lisi"</span>,</div><div class="line"><span class="attr">userName</span> : <span class="string">"李四"</span></div><div class="line">&#125;];</div><div class="line">$scope.showUserInfo = <span class="literal">false</span>;<span class="comment">//显示作者详细信息开关</span></div><div class="line">$scope.currentUser = &#123;&#125;; <span class="comment">//当前选中的作者</span></div><div class="line">$scope.getUserInfo = <span class="function"><span class="keyword">function</span>(<span class="params">userId</span>)</span>&#123;</div><div class="line">$scope.currentUser = userService.getUser(userId);</div><div class="line"><span class="comment">//调用 userService的getUser函数</span></div><div class="line">$scope.showUserInfo = <span class="literal">true</span>;</div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//定时器：隐藏作者详细信息</span></div><div class="line">$scope.showUserInfo = <span class="literal">false</span>;</div><div class="line">&#125;,<span class="number">3000</span>);</div><div class="line">&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>&#160; &#160; &#160; &#160;我们的userService注入到我们的test8Controller后，我们就可以像使用其他服务（我们前面提到的$http服务）一样的使用userService了。</p>
<p>相关的HTML代码如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">/* View HTML*/</div><div class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">ng-repeat</span>=<span class="string">"article_ in articles"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">&#123;&#123;article_.title&#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">rel</span>=<span class="string">"nofollow"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">......</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-show</span>=<span class="string">"showUserInfo"</span>&gt;</span></div><div class="line">用户ID：&#123;&#123;currentUser.userId&#125;&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">用户名：&#123;&#123;currentUser.userName&#125;&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">用户简介：&#123;&#123;currentUser.userInfo&#125;&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      本文主要介绍了angular中的服务
    
    </summary>
    
      <category term="AngularJS" scheme="http://yoursite.com/categories/AngularJS/"/>
    
    
      <category term="angularjs" scheme="http://yoursite.com/tags/angularjs/"/>
    
      <category term="前端框架" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
      <category term="angular服务" scheme="http://yoursite.com/tags/angular%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>AJAX</title>
    <link href="http://yoursite.com/2017/04/25/ajax/"/>
    <id>http://yoursite.com/2017/04/25/ajax/</id>
    <published>2017-04-25T05:17:02.000Z</published>
    <updated>2017-05-14T14:15:59.842Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h1 id="正文开始"><a href="#正文开始" class="headerlink" title="正文开始"></a>正文开始</h1><p><center style="font-size: 30px"><code>Ajax</code></center></p>
<hr>
<h2 id="ajax简介"><a href="#ajax简介" class="headerlink" title="ajax简介"></a>ajax简介</h2><p>&#160; &#160; &#160; &#160;<code>AJAX</code>即“Asynchronous Javascript And XML”（异步JavaScript和XML），是指一种创建交互式网页应用的网页开发技术。Ajax不是一种新的编程语言，而是使用现有标准的新方法。AJAX可以在不重新加载整个页面的情况下，与服务器交换数据。这种异步交互的方式，使用户单击后，不必刷新页面也能获取新数据。使用<code>Ajax</code>，用户可以创建接近本地桌面应用的直接、高可用、更丰富、更动态的Web用户界面。</p>
<p><code>Ajax</code>包括. </p>
<ul>
<li>XHTML和CSS</li>
<li>使用文档对象模型(Document Object Model)作动态显示和交互</li>
<li>使用XML和XSLT做数据交互和操作</li>
<li>使用XMLHttpRequest进行异步数据接收</li>
<li>利用AJAX可以做：</li>
<li>注册时，输入用户名自动检测用户是否已经存在。</li>
<li>登陆时，提示用户名密码错误</li>
<li>删除数据行时，将行ID发送到后台，后台在数据库中删除，数据库删除成功后，在页面DOM中将数据- 行也删除。</li>
</ul>
<h2 id="ajax伪造"><a href="#ajax伪造" class="headerlink" title="ajax伪造"></a>ajax伪造</h2><p>&#160; &#160; &#160; &#160;iframe就是我们常用的iframe标签:<em><em>&lt;iframe&gt;</em></em>。iframe标签是框架的一种形式，也比较常用到，iframe一般用来包含别的页面，例如我们可以在我们自己的网站页面加载别人网站或者本站其他页面的内容。iframe标签的最大作用就是让页面变得美观。iframe标签的用法有很多，主要区别在于对iframe标签定义的形式不同，例如定义iframe的长宽高。<br>因此，iframe标签具有局部加载内容的特性，所以可以使用其来伪造<code>Ajax</code>请求。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>伪造AJAX<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>请输入要加载的地址：<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"currentTime"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"url"</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"提交"</span> <span class="attr">onclick</span>=<span class="string">"LoadPage();"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>加载页面位置：<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">"iframePosition"</span> <span class="attr">style</span>=<span class="string">"width: 100%;height: 500px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">            <span class="built_in">window</span>.onload= <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> myDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">                <span class="built_in">document</span>.getElementById(<span class="string">'currentTime'</span>).innerText = myDate.getTime();</div><div class="line"> </div><div class="line">            &#125;;</div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">LoadPage</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> targetUrl =  <span class="built_in">document</span>.getElementById(<span class="string">'url'</span>).value;</div><div class="line">                <span class="built_in">document</span>.getElementById(<span class="string">"iframePosition"</span>).src = targetUrl;</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>&#160; &#160; &#160; &#160;原理是这样的，设置一个提交按钮，再设置一个输入框，当我们输入一个网址的时候，在当前的页面加载输入网址的页面信息，呈现在iframe框里，这样就能做到不刷新URL来提交不同的信息。</p>
<h2 id="原生ajax"><a href="#原生ajax" class="headerlink" title="原生ajax"></a>原生ajax</h2><p><code>Ajax</code>的核心是XMLHttpRequest对象(XHR)。XHR为向服务器发送请求和解析服务器响应提供了接口。能够以异步方式从服务器获取新数据。</p>
<h3 id="XMLHttpRequest对象"><a href="#XMLHttpRequest对象" class="headerlink" title="XMLHttpRequest对象"></a>XMLHttpRequest对象</h3><p><code>Ajax</code>的核心是XMLHttpRequest对象(XHR)。XHR为向服务器发送请求和解析服务器响应提供了接口。能够以异步方式从服务器获取新数据。<br>XHR的主要方法有：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.</span> <span class="keyword">void</span> open(<span class="built_in">String</span> method,<span class="built_in">String</span> url,Boolen <span class="keyword">async</span>)   </div><div class="line">   用于创建请求    </div><div class="line">   参数：</div><div class="line">       method： 请求方式（字符串类型），如：POST、GET、DELETE...</div><div class="line">       url：    要请求的地址（字符串类型）</div><div class="line">       <span class="keyword">async</span>：  是否异步（布尔类型）</div><div class="line"> </div><div class="line"><span class="number">2.</span> <span class="keyword">void</span> send(<span class="built_in">String</span> body)</div><div class="line">    用于发送请求</div><div class="line">    参数：</div><div class="line">        body： 要发送的数据（字符串类型） </div><div class="line"></div><div class="line"><span class="number">3.</span> <span class="keyword">void</span> setRequestHeader(<span class="built_in">String</span> header,<span class="built_in">String</span> value)</div><div class="line">    用于设置请求头</div><div class="line">    参数：</div><div class="line">        header： 请求头的key（字符串类型）</div><div class="line">        vlaue：  请求头的value（字符串类型）</div><div class="line"> </div><div class="line"><span class="number">4.</span> <span class="built_in">String</span> getAllResponseHeaders()</div><div class="line">    获取所有响应头</div><div class="line">    返回值：</div><div class="line">        响应头数据（字符串类型）</div><div class="line"> </div><div class="line"><span class="number">5.</span> <span class="built_in">String</span> getResponseHeader(<span class="built_in">String</span> header)</div><div class="line">    获取响应头中指定header的值</div><div class="line">    参数：</div><div class="line">        header： 响应头的key（字符串类型）</div><div class="line">    返回值：</div><div class="line">        响应头中指定的header对应的值</div><div class="line"> </div><div class="line"><span class="number">6.</span> <span class="keyword">void</span> abort()</div><div class="line">    终止请求</div></pre></td></tr></table></figure>
<p>XHR的主要属性有：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.</span> <span class="built_in">Number</span> readyState</div><div class="line">   状态值（整数），可以确定请求/响应过程的当前活动阶段</div><div class="line"></div><div class="line"><span class="number">0</span>：未初始化。未调用open()方法</div><div class="line"><span class="number">1</span>：启动。已经调用open()方法，未调用send()方法</div><div class="line"><span class="number">2</span>：发送。已经调用send()方法，未接收到响应</div><div class="line"><span class="number">3</span>：接收。已经接收到部分数据</div><div class="line"><span class="number">4</span>：完成。已经接收到全部数据，可以在客户端使用</div><div class="line"></div><div class="line"></div><div class="line"><span class="number">2.</span> <span class="built_in">Function</span> onreadystatechange                当readyState的值改变时自动触发执行其对应的函数（回调函数）</div><div class="line"></div><div class="line"></div><div class="line"><span class="number">3.</span> <span class="built_in">String</span> responseText                        作为响应主体被返回的文本（字符串类型）</div><div class="line"></div><div class="line"><span class="number">4.</span> XmlDocument responseXML                    服务器返回的数据（Xml对象） </div><div class="line"></div><div class="line"><span class="number">5.</span> <span class="built_in">Number</span> states                              状态码（整数），如：<span class="number">200</span>、<span class="number">404.</span>.. </div><div class="line"></div><div class="line"><span class="number">6.</span> <span class="built_in">String</span> statesText                          状态文本（字符串），如：OK、NotFound...</div></pre></td></tr></table></figure>
<h3 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h3><p>GET用于向服务器查询某些信息：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>XMLHttpRequest - Ajax请求<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"XmlGetRequest();"</span> <span class="attr">value</span>=<span class="string">"Get发送请求"</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/statics/jquery-1.12.4.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">GetXHR</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> xhr = <span class="literal">null</span>;</div><div class="line">            <span class="keyword">if</span>(XMLHttpRequest)&#123;</div><div class="line">                xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> xhr;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">XmlGetRequest</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> xhr = GetXHR();</div><div class="line">            <span class="comment">// 定义回调函数</span></div><div class="line">            xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span>)&#123;</div><div class="line">                    <span class="comment">// 已经接收到全部响应数据，执行以下操作</span></div><div class="line">                    <span class="keyword">var</span> data = xhr.responseText;</div><div class="line">                    <span class="built_in">console</span>.log(data);</div><div class="line">                &#125;</div><div class="line">            &#125;;</div><div class="line">            <span class="comment">// 指定连接方式和地址----文件方式</span></div><div class="line">            xhr.open(<span class="string">'get'</span>, <span class="string">"/test/"</span>, <span class="literal">true</span>);</div><div class="line">            <span class="comment">// 发送请求</span></div><div class="line">            xhr.send();</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h3><p>POST请求用于向服务器发送应该被保存的数据。POST请求的主体可以包含非常多的数据，而且格式不限。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>POST<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>XMLHttpRequest - Ajax请求<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"XmlPostRequest();"</span> <span class="attr">value</span>=<span class="string">"Post发送请求"</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/statics/jquery-1.12.4.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">GetXHR</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> xhr = <span class="literal">null</span>;</div><div class="line">            <span class="keyword">if</span>(XMLHttpRequest)&#123;</div><div class="line">                xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> xhr;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">XmlPostRequest</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> xhr = GetXHR();</div><div class="line">            <span class="comment">// 定义回调函数</span></div><div class="line">            xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>)&#123;</div><div class="line">                    <span class="comment">// 已经接收到全部响应数据，执行以下操作</span></div><div class="line">                    <span class="keyword">var</span> data = xhr.responseText;</div><div class="line">                    <span class="built_in">console</span>.log(data);</div><div class="line">                &#125;</div><div class="line">            &#125;;</div><div class="line">            <span class="comment">// 指定连接方式和地址----文件方式</span></div><div class="line">            xhr.open(<span class="string">'POST'</span>, <span class="string">"/test/"</span>, <span class="literal">true</span>);</div><div class="line">            <span class="comment">// 设置请求头</span></div><div class="line">            xhr.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded; charset-UTF-8'</span>);</div><div class="line">            <span class="comment">// 发送请求</span></div><div class="line">            xhr.send(<span class="string">'n1=1;n2=2;'</span>);</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="jquery-ajax"><a href="#jquery-ajax" class="headerlink" title="jquery ajax"></a>jquery ajax</h2><p>jQuery 提供多个与 <code>AJAX</code> 有关的方法。<br>&#160; &#160; &#160; &#160;通过 jQuery AJAX 方法，您能够使用 HTTP Get 和 HTTP Post 从远程服务器上请求文本、HTML、XML 或 JSON - 同时您能够把这些外部数据直接载入网页的被选元素中。</p>
<ul>
<li>jQuery 不是生产者，而是大自然搬运工。</li>
<li>jQuery Ajax本质 XMLHttpRequest 或 ActiveXObject </li>
<li>注：2.+版本不再支持IE9以下的浏览器</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.</span> jQuery.get(...)</div><div class="line">       所有参数：</div><div class="line">              url: 待载入页面的URL地址</div><div class="line">             data: 待发送 Key/value 参数。</div><div class="line">          success: 载入成功时回调函数。</div><div class="line">         dataType: 返回内容格式，xml, json,  script, text, html</div><div class="line"></div><div class="line"><span class="number">2.</span>jQuery.post(...)</div><div class="line">       所有参数：</div><div class="line">              url: 待载入页面的URL地址</div><div class="line">             data: 待发送 Key/value 参数</div><div class="line">          success: 载入成功时回调函数</div><div class="line">         dataType: 返回内容格式，xml, json,  script, text, html</div><div class="line"></div><div class="line"><span class="number">3.</span>jQuery.getJSON(...)</div><div class="line">       所有参数：</div><div class="line">              url: 待载入页面的URL地址</div><div class="line">             data: 待发送 Key/value 参数。</div><div class="line">          success: 载入成功时回调函数。</div><div class="line"></div><div class="line"><span class="number">4.</span>jQuery.getScript(...)</div><div class="line">       所有参数：</div><div class="line">              url: 待载入页面的URL地址</div><div class="line">             data: 待发送 Key/value 参数。</div><div class="line">          success: 载入成功时回调函数。</div><div class="line"></div><div class="line"><span class="number">5.</span>jQuery.ajax(...)</div><div class="line">       部分参数：</div><div class="line">              url：请求地址</div><div class="line">             type：请求方式，GET、POST（<span class="number">1.9</span><span class="number">.0</span>之后用method）</div><div class="line">          headers：请求头</div><div class="line">             data：要发送的数据</div><div class="line">      contentType：即将发送信息至服务器的内容编码类型(默认: <span class="string">"application/x-www-form-urlencoded; charset=UTF-8"</span>)</div><div class="line">            <span class="keyword">async</span>：是否异步</div><div class="line">          timeout：设置请求超时时间（毫秒）</div><div class="line">       beforeSend：发送请求前执行的函数(全局)</div><div class="line">         complete：完成之后执行的回调函数(全局)</div><div class="line">          success：成功之后执行的回调函数(全局)</div><div class="line">            error：失败之后执行的回调函数(全局)</div><div class="line">          accepts：通过请求头发送给服务器，告诉服务器当前客户端课接受的数据类型</div><div class="line">         dataType：将服务器端返回的数据转换成指定类型</div><div class="line">            <span class="string">"xml"</span>: 将服务器端返回的内容转换成xml格式</div><div class="line">           <span class="string">"text"</span>: 将服务器端返回的内容转换成普通文本格式</div><div class="line">           <span class="string">"html"</span>: 将服务器端返回的内容转换成普通文本格式，在插入DOM中时，如果包含JavaScript标签，则会尝试去执行。</div><div class="line">         <span class="string">"script"</span>: 尝试将返回值当作JavaScript去执行，然后再将服务器端返回的内容转换成普通文本格式</div><div class="line">           <span class="string">"json"</span>: 将服务器端返回的内容转换成相应的JavaScript对象</div><div class="line">          <span class="string">"jsonp"</span>: JSONP 格式使用 JSONP 形式调用函数时，如 <span class="string">"myurl?callback=?"</span> jQuery 将自动替换 ? 为正确的函数名，以执行回调函数</div><div class="line"></div><div class="line">方法列表</div></pre></td></tr></table></figure>
<p>写一个最简单的例子:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"XmlSendRequest();"</span> <span class="attr">value</span>=<span class="string">'Ajax请求'</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"jquery-1.12.4.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">JXmlSendRequest</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            $.ajax(&#123;</div><div class="line">                <span class="attr">url</span>: <span class="string">"http://c2.com:8000/test/"</span>,    <span class="comment">// 访问url地址</span></div><div class="line">                type: <span class="string">'GET'</span>,                        <span class="comment">// get方式提交</span></div><div class="line">                dataType: <span class="string">'text'</span>,　　　　　　　　　　  <span class="comment">// 数据类型</span></div><div class="line">                success: <span class="function"><span class="keyword">function</span>(<span class="params">data, statusText, xmlHttpRequest</span>)</span>&#123;  <span class="comment">// 成功后返回的结果</span></div><div class="line">                    <span class="built_in">console</span>.log(data);</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="跨域ajax"><a href="#跨域ajax" class="headerlink" title="跨域ajax"></a>跨域ajax</h2><p>&#160; &#160; &#160; &#160;由于浏览器存在同源策略机制，同源策略阻止从一个源加载的文档或脚本获取或设置另一个源加载的文档的属性。所以ajax本身是不可以跨域的，通过产生一个script标签来实现跨域。因为script标签的src属性是没有跨域的限制的。<br>浏览器同源策略并不是对所有的请求均制约：</p>
<ul>
<li>制约： XmlHttpRequest</li>
<li>不制约： img、iframe、script等具有src属性的标签</li>
<li>注:自己模拟跨域，需要现在自己电脑的host文件里面添加两条域名，我这里添加的是bd.com和ky.com这两个域名</li>
</ul>
<p>一、JSONP实现跨域请求<br>JSONP是一个非官方的协议，它允许在服务器端集成Script tags返回至客户端，通过javascript callback的形式实现跨域访问。jsonp只能通过get方式进行跨域请求</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span>  <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Ajax"</span> <span class="attr">onclick</span>=<span class="string">"DoAjax();"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span>  <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"JsonpAjax"</span> <span class="attr">onclick</span>=<span class="string">"JsonpAjax();"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/statics/jquery-1.12.4.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://aylin.com:8002/statics/jquery.cookie.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">arg</span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(arg);  <span class="comment">// 输出结果就是python代码给传过来的列表[11,22,33,]</span></div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">DoAjax</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            $.ajax(&#123;</div><div class="line">                <span class="attr">url</span>: <span class="string">'http://org/index'</span>,</div><div class="line">                <span class="attr">type</span>: <span class="string">'POST'</span>,</div><div class="line">                <span class="attr">data</span>: &#123;<span class="string">'k1'</span>: <span class="string">'v1'</span>&#125;,</div><div class="line">                <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">arg</span>) </span>&#123;</div><div class="line">                    <span class="built_in">console</span>.log(arg);</div><div class="line">                &#125;               </div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">JsonpAjax</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="comment">//            var tag = document.createElement('script');</span></div><div class="line"><span class="comment">//            tag.src = "http://alex.com:8002/index";</span></div><div class="line"><span class="comment">//            document.head.appendChild(tag);</span></div><div class="line"><span class="comment">//            document.head.removeChild(tag);</span></div><div class="line">            $.ajax(&#123;</div><div class="line">                <span class="attr">url</span>: <span class="string">"http://org/index"</span>,</div><div class="line">                <span class="attr">dataType</span>: <span class="string">'jsonp'</span>,</div><div class="line">                <span class="attr">jsonpCallBack</span>: <span class="string">'func'</span>   <span class="comment">// 对端给返回函数名，函数接收的参数是内容</span></div><div class="line">            &#125;)</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>在这里jsonp就采用script标签的src来进行跨域请求的</li>
</ul>
<h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>&#160; &#160; &#160; &#160;上面那种方法说到浏览器的同源策略导致ajax无法进行跨域传输，那么这种方法就可以突破浏览器限制来进行传输。当数据发送给对方域名的时候，对方已经收到，但是在返回的时候被浏览器给阻挡，我们可以写一串类似于身份证的字符串，通过浏览器的预检，从而达到数据的传输。<br>这方面分为简单请求和非简单请求</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">条件：</div><div class="line">    <span class="number">1</span>、请求方式：HEAD、GET、POST</div><div class="line">    <span class="number">2</span>、请求头信息：</div><div class="line">        Accept</div><div class="line">        Accept-Language</div><div class="line">        Content-Language</div><div class="line">        Last-Event-ID</div><div class="line">        Content-Type 对应的值是以下三个中的任意一个</div><div class="line">                                application/x-www-form-urlencoded</div><div class="line">                                multipart/form-data</div><div class="line">                                text/plain</div><div class="line"> </div><div class="line">注意：同时满足以上两个条件时，则是简单请求，否则为复杂请求</div></pre></td></tr></table></figure>
<p>&#160; &#160; &#160; &#160;简单请求只一次请求，而复杂请求是两次请求，在发送数据之前会先发一次请求用于做“预检”，只有“预检”通过后才再发送一次请求用于数据传输。</p>
<h4 id="基于cors实现AJAX请求"><a href="#基于cors实现AJAX请求" class="headerlink" title="基于cors实现AJAX请求:"></a>基于cors实现AJAX请求:</h4><h5 id="1-支持跨域-简单请求"><a href="#1-支持跨域-简单请求" class="headerlink" title="1.支持跨域,简单请求"></a>1.支持跨域,简单请求</h5><p>服务器设置响应头：Access-Control-Allow-Origin = ‘域名’ 或 ‘*’</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">onclick</span>=<span class="string">"XmlSendRequest();"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">onclick</span>=<span class="string">"JqSendRequest();"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"jquery-1.12.4.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">XmlSendRequest</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">            xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span>) &#123;</div><div class="line">                    <span class="keyword">var</span> result = xhr.responseText;</div><div class="line">                    <span class="built_in">console</span>.log(result);</div><div class="line">                &#125;</div><div class="line">            &#125;;</div><div class="line">            xhr.open(<span class="string">'GET'</span>, <span class="string">"http://c2.com:8000/test/"</span>, <span class="literal">true</span>);</div><div class="line">            xhr.send();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">JqSendRequest</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            $.ajax(&#123;</div><div class="line">                <span class="attr">url</span>: <span class="string">"http://c2.com:8000/test/"</span>,</div><div class="line">                <span class="attr">type</span>: <span class="string">'GET'</span>,</div><div class="line">                <span class="attr">dataType</span>: <span class="string">'text'</span>,</div><div class="line">                <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">data, statusText, xmlHttpRequest</span>)</span>&#123;</div><div class="line">                    <span class="built_in">console</span>.log(data);</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>后台代码设置为：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">class MainHandler(tornado.web.RequestHandler):</div><div class="line">    def get(self):</div><div class="line">        self.set_header('Access-Control-Allow-Origin', "http://www.xxx.com")</div><div class="line">        self.write('&#123;"status": true, "data": "seven"&#125;')</div></pre></td></tr></table></figure>
<h5 id="2-支持跨域-复杂请求"><a href="#2-支持跨域-复杂请求" class="headerlink" title="2.支持跨域,复杂请求"></a>2.支持跨域,复杂请求</h5><p>由于复杂请求时，首先会发送“预检”请求，如果“预检”成功，则发送真实数据。</p>
<ul>
<li>“预检”请求时，允许请求方式则需服务器设置响应头：<code>Access-Control-Request-Method</code></li>
<li>“预检”请求时，允许请求头则需服务器设置响应头：<code>Access-Control-Request-Headers</code></li>
<li>“预检”缓存时间，服务器设置响应头：<code>Access-Control-Max-Age</code></li>
</ul>
<p>html代码:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">onclick</span>=<span class="string">"XmlSendRequest();"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">onclick</span>=<span class="string">"JqSendRequest();"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"jquery-1.12.4.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">XmlSendRequest</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">            xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span>) &#123;</div><div class="line">                    <span class="keyword">var</span> result = xhr.responseText;</div><div class="line">                    <span class="built_in">console</span>.log(result);</div><div class="line">                &#125;</div><div class="line">            &#125;;</div><div class="line">            xhr.open(<span class="string">'PUT'</span>, <span class="string">"http://aylin.com:8000/test/"</span>, <span class="literal">true</span>);</div><div class="line">            xhr.setRequestHeader(<span class="string">'k1'</span>, <span class="string">'v1'</span>);</div><div class="line">            xhr.send();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">JqSendRequest</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            $.ajax(&#123;</div><div class="line">                <span class="attr">url</span>: <span class="string">"http://aylin.com:8000/test/"</span>,</div><div class="line">                <span class="attr">type</span>: <span class="string">'PUT'</span>,</div><div class="line">                <span class="attr">dataType</span>: <span class="string">'text'</span>,</div><div class="line">                <span class="attr">headers</span>: &#123;<span class="string">'k1'</span>: <span class="string">'v1'</span>&#125;,</div><div class="line">                <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">data, statusText, xmlHttpRequest</span>)</span>&#123;</div><div class="line">                    <span class="built_in">console</span>.log(data);</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>后台代码</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">class MainHandler(tornado.web.RequestHandler):</div><div class="line">    </div><div class="line">    def put(self):</div><div class="line">        self.set_header('Access-Control-Allow-Origin', "http://www.xxx.com")</div><div class="line">        self.write('&#123;"status": true, "data": "seven"&#125;')</div><div class="line"></div><div class="line">    def options(self, *args, **kwargs):</div><div class="line">        self.set_header('Access-Control-Allow-Origin', "http://www.xxx.com")</div><div class="line">        self.set_header('Access-Control-Allow-Headers', "k1,k2")</div><div class="line">        self.set_header('Access-Control-Allow-Methods', "PUT,DELETE")</div><div class="line">        self.set_header('Access-Control-Max-Age', 10)</div><div class="line"></div><div class="line">tornado</div></pre></td></tr></table></figure>
<h3 id="跨域传输cookie"><a href="#跨域传输cookie" class="headerlink" title="跨域传输cookie"></a>跨域传输cookie</h3><p> &#160; &#160; &#160; &#160;在跨域请求中，默认情况下，HTTP Authentication信息，Cookie头以及用户的SSL证书无论在预检请求中或是在实际请求都是不会被发送。<br>如果想要发送：</p>
<ul>
<li>浏览器端：XMLHttpRequest的withCredentials为true</li>
<li>服务器端：Access-Control-Allow-Credentials为true</li>
<li>注意：服务器端响应的 Access-Control-Allow-Origin 不能是通配符 *</li>
</ul>
<p><code>html</code>代码</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">onclick</span>=<span class="string">"XmlSendRequest();"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">onclick</span>=<span class="string">"JqSendRequest();"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"jquery-1.12.4.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">XmlSendRequest</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">            xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span>) &#123;</div><div class="line">                    <span class="keyword">var</span> result = xhr.responseText;</div><div class="line">                    <span class="built_in">console</span>.log(result);</div><div class="line">                &#125;</div><div class="line">            &#125;;</div><div class="line"></div><div class="line">            xhr.withCredentials = <span class="literal">true</span>;</div><div class="line"></div><div class="line">            xhr.open(<span class="string">'PUT'</span>, <span class="string">"http://aylin.com:8000/test/"</span>, <span class="literal">true</span>);</div><div class="line">            xhr.setRequestHeader(<span class="string">'k1'</span>, <span class="string">'v1'</span>);</div><div class="line">            xhr.send();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">JqSendRequest</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            $.ajax(&#123;</div><div class="line">                <span class="attr">url</span>: <span class="string">"http://aylin.com:8000/test/"</span>,</div><div class="line">                <span class="attr">type</span>: <span class="string">'PUT'</span>,</div><div class="line">                <span class="attr">dataType</span>: <span class="string">'text'</span>,</div><div class="line">                <span class="attr">headers</span>: &#123;<span class="string">'k1'</span>: <span class="string">'v1'</span>&#125;,</div><div class="line">                <span class="attr">xhrFields</span>:&#123;<span class="attr">withCredentials</span>: <span class="literal">true</span>&#125;,</div><div class="line">                <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">data, statusText, xmlHttpRequest</span>)</span>&#123;</div><div class="line">                    <span class="built_in">console</span>.log(data);</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>view code</code>代码</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">复制代码</div><div class="line">class MainHandler(tornado.web.RequestHandler):</div><div class="line">    </div><div class="line">    def put(self):</div><div class="line">        self.set_header('Access-Control-Allow-Origin', "http://www.xxx.com")</div><div class="line">        self.set_header('Access-Control-Allow-Credentials', "true")</div><div class="line">        </div><div class="line">        self.set_header('xxoo', "seven")</div><div class="line">        self.set_header('zhangyanlinhenshuai', "feichangshuai")</div><div class="line">        self.set_header('Access-Control-Expose-Headers', "shuai,shuaishuai")</div><div class="line"></div><div class="line">        self.set_cookie('kkkkk', 'vvvvv');</div><div class="line"></div><div class="line">        self.write('&#123;"status": true, "data": "seven"&#125;')</div><div class="line"></div><div class="line">    def options(self, *args, **kwargs):</div><div class="line">        self.set_header('Access-Control-Allow-Origin', "http://www.xxx.com")</div><div class="line">        self.set_header('Access-Control-Allow-Headers', "k1,k2")</div><div class="line">        self.set_header('Access-Control-Allow-Methods', "PUT,DELETE")</div><div class="line">        self.set_header('Access-Control-Max-Age', 10)</div><div class="line">复制代码</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      本文主要介绍了什么是AJAX，jquery中的ajax，以及跨域的ajax
    
    </summary>
    
      <category term="AJAX" scheme="http://yoursite.com/categories/AJAX/"/>
    
    
      <category term="AJAX" scheme="http://yoursite.com/tags/AJAX/"/>
    
      <category term="跨域，前后端数据交互" scheme="http://yoursite.com/tags/%E8%B7%A8%E5%9F%9F%EF%BC%8C%E5%89%8D%E5%90%8E%E7%AB%AF%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92/"/>
    
  </entry>
  
  <entry>
    <title>angularjs(二)</title>
    <link href="http://yoursite.com/2017/04/25/angular-2/"/>
    <id>http://yoursite.com/2017/04/25/angular-2/</id>
    <published>2017-04-25T05:17:02.000Z</published>
    <updated>2017-05-14T14:15:29.524Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h1 id="正文开始"><a href="#正文开始" class="headerlink" title="正文开始"></a>正文开始</h1><p><center style="font-size: 30px"><code>AugularJS特性</code></center></p>
<hr>
<p>&#160; &#160; &#160; &#160;AngularJS是一个新出现的强大客户端技术，提供给大家的一种开发强大应用的方式。这种方式利用并且扩展HTML，CSS和javascript，并且弥补了它们的一些非常明显的不足。本应该使用HTML来实现而现在由它开发的动态一些内容。</p>
<p>AngularJS有<code>五个</code>最重要的功能和特性：</p>
<h2 id="特性一：双向的数据绑定"><a href="#特性一：双向的数据绑定" class="headerlink" title="特性一：双向的数据绑定"></a>特性一：双向的数据绑定</h2><p>&#160; &#160; &#160; &#160;数据绑定可能是AngularJS最酷最实用的特性。它能够帮助你避免书写大量的初始代码从而节约开发时间。一个典型的web应用可能包含了80%的代码用来处理，查询和监听DOM。数据绑定是的代码更少，你可以专注于你的应用。</p>
<p>&#160; &#160; &#160; &#160;我们想象一下Model是你的应用中的简单事实。你的Model是你用来读取或者更新的部分。数据绑定指令提供了你的Model投射到view的方法。这些投射可以无缝的，毫不影响的应用到web应用中。</p>
<p>&#160; &#160; &#160; &#160;传统来说，当model变化了。 开发人员需要手动处理DOM元素并且将属性反映到这些变化中。这个一个双向的过程。一方面，model变化驱动了DOM中元素变化，另一方面，DOM元素的变化也会影响到Model。这个在用户互动中更加复杂，因为开发人员需要处理和解析<br>这些互动，然后融合到一个model中，并且更新View。这是一个手动的复杂过程，当一个应用非常庞大的时候，将会是一件非常费劲的事情。</p>
<p>这里肯定有更好的解决方案！那就是AngularJS的双向数据绑定，能够同步DOM和Model等等。<br>这里有一个非常简单的例子，用来演示一个input输入框和&lt; h1&gt;元素的双向绑定(例01)：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>angular双向数据绑定<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;content&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">          <span class="comment">&lt;!-- 因为使用了双向绑定content指向的都是同一个值，所以h1的内容就是text输入框的内容 --&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">ng-model</span>=<span class="string">"content"</span>&gt;</span></div><div class="line">          <span class="comment">&lt;!-- 设置双向绑定 --&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://code.angularjs.org/angular-1.0.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="特性二：模板"><a href="#特性二：模板" class="headerlink" title="特性二：模板"></a>特性二：模板</h2><p>&#160; &#160; &#160; &#160;在AngularJS中，一个模板就是一个HTML文件。但是HTML的内容扩展了，包含了很多帮助你映射model到view的内容。</p>
<p>&#160; &#160; &#160; &#160;HTML模板将会被浏览器解析到DOM中。DOM然后成为AngularJS编译器的输入。AngularJS将会遍历DOM模板来生成一些指导，即，directive（指令）。所有的指令都负责针对view来设置数据绑定。</p>
<p>&#160; &#160; &#160; &#160;我们要理解AuguarJS并不把模板当做String来操作。输入AngularJS的是DOM而非string。数据绑定是DOM变化，不是字符串的连接或者innerHTML变化。使用DOM作为输入，而不是字符串，是AngularJS区别于其它的框架的最大原因。使用DOM允许你扩展指令词汇并且可以创建你自己的指令，甚至开发可重用的组件。</p>
<p>&#160; &#160; &#160; &#160;最大的好处是为设计师和开发者创建了一个紧密的工作流。设计师可以像往常一样开发标签，然后开发者拿过来添加上功能，通过数据绑定将会使得这个过程非常简单。<br>这里有一个例子，我们使用ng-repeat指令来循环图片数组并且加入img模板，如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">AlbumCtrl</span>(<span class="params">$scope</span>) </span>&#123;</div><div class="line">    scope.images = [</div><div class="line">        &#123;<span class="string">"image"</span>:<span class="string">"img/image_01.png"</span>, <span class="string">"description"</span>:<span class="string">"Image 01 description"</span>&#125;,</div><div class="line">        &#123;<span class="string">"image"</span>:<span class="string">"img/image_02.png"</span>, <span class="string">"description"</span>:<span class="string">"Image 02 description"</span>&#125;,</div><div class="line">        &#123;<span class="string">"image"</span>:<span class="string">"img/image_03.png"</span>, <span class="string">"description"</span>:<span class="string">"Image 03 description"</span>&#125;,</div><div class="line">        &#123;<span class="string">"image"</span>:<span class="string">"img/image_04.png"</span>, <span class="string">"description"</span>:<span class="string">"Image 04 description"</span>&#125;,</div><div class="line">        &#123;<span class="string">"image"</span>:<span class="string">"img/image_05.png"</span>, <span class="string">"description"</span>:<span class="string">"Image 05 description"</span>&#125;</div><div class="line">    ];</div><div class="line">&#125;</div><div class="line">&lt;div ng-controller=<span class="string">"AlbumCtrl"</span>&gt;</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"image in images"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">ng-src</span>=<span class="string">"http://wangyuxuan.win/&#123;&#123;image.thumbnail&#125;&#125;"</span> <span class="attr">rel</span>=<span class="string">"nofollow"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>&#160; &#160; &#160; &#160;这里还有一件事值得提一句，AngularJS并不强制你学习一个新的语法或者从你的应用中提出你的模板。</p>
<h2 id="特性三：MVC"><a href="#特性三：MVC" class="headerlink" title="特性三：MVC"></a>特性三：MVC</h2><p>&#160; &#160; &#160; &#160;针对客户端应用开发AngularJS吸收了传统的MVC基本原则。MVC或者Model-View-Controll设计模式针对不同的人可能意味不同的东西。AngularJS并不执行传统意义上的MVC，更接近于MVVM（Moodel-View-ViewModel)。</p>
<p><code>Model</code></p>
<p>&#160; &#160; &#160; &#160;model是应用中的简单数据。一般是简单的javascript对象。这里没有必要继承框架的classes，使用proxy对象封装或者使用特别的setter/getter方法来访问。事实上我们处理vanilla javascript的方法就是一个非常好的特性，这种方法使得我们更少使用应用的原型。</p>
<p><code>ViewModel</code></p>
<p>&#160; &#160; &#160; &#160;viewmodel是一个用来提供特别数据和方法从而维护指定view的对象。<br>viewmodel是$scope的对象，只存在于AnguarJS的应用中。$scope只是一个简单的js对象，这个对象使用简单的API来侦测和广播状态变化。</p>
<p><code>Controller</code></p>
<p>&#160; &#160; &#160; &#160;controller负责设置初始状态和参数化$scope方法用以控制行为。需要指出的controller并不保存状态也不和远程服务互动。</p>
<p><code>View</code></p>
<p>&#160; &#160; &#160; &#160;view是AngularJS解析后渲染和绑定后生成的HTML 。这个部分帮助你创建web应用的架构。$scope拥有一个针对数据的参考，controller定义行为，view处理布局和互动。</p>
<h2 id="特性四：服务和依赖注入"><a href="#特性四：服务和依赖注入" class="headerlink" title="特性四：服务和依赖注入"></a>特性四：服务和依赖注入</h2><p>&#160; &#160; &#160; &#160;AngularJS服务其作用就是对外提供某个特定的功能。</p>
<p>&#160; &#160; &#160; &#160;AngularJS拥有内建的依赖注入（DI）子系统，可以帮助开发人员更容易的开发，理解和测试应用。</p>
<p>&#160; &#160; &#160; &#160;DI允许你请求你的依赖，而不是自己找寻它们。比如，我们需要一个东西，DI负责找创建并且提供给我们。</p>
<p>&#160; &#160; &#160; &#160;为了而得到核心的AngularJS服务，只需要添加一个简单服务作为参数，AngularJS会侦测并且提供给你：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">EditCtrl</span>(<span class="params">$scope, $location, $routeParams</span>) </span>&#123;</div><div class="line">     <span class="comment">// Something clever here...</span></div><div class="line">&#125;</div><div class="line">你也可以定义自己的服务并且让它们注入：</div><div class="line">angular.module(<span class="string">'MyServiceModule'</span>, []).</div><div class="line">    factory(<span class="string">'notify'</span>, [<span class="string">'$window'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">win</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</div><div class="line">        win.alert(msg);</div><div class="line">    &#125;;</div><div class="line">&#125;]);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myController</span>(<span class="params">scope, notifyService</span>) </span>&#123;</div><div class="line">    scope.callNotify = <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</div><div class="line">        notifyService(msg);</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line">myController.$inject = [<span class="string">'$scope'</span>, <span class="string">'notify'</span>];</div></pre></td></tr></table></figure></p>
<h2 id="特性五：指令（Directives）"><a href="#特性五：指令（Directives）" class="headerlink" title="特性五：指令（Directives）"></a>特性五：指令（Directives）</h2><p>&#160; &#160; &#160; &#160;指令是我个人最喜欢的特性。你是不是也希望浏览器可以做点儿有意思的事情？那么AngularJS可以做到。</p>
<p>&#160; &#160; &#160; &#160;指令可以用来创建自定义的标签。它们可以用来装饰元素或者操作DOM属性。可以作为标签、属性、注释和类名使用。</p>
<p>这里是一个例子，它监听一个事件并且针对的更新它的$scope ，如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">myModule.directive(<span class="string">'myComponent'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">mySharedService</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">restrict</span>: <span class="string">'E'</span>,</div><div class="line">        <span class="attr">controller</span>: <span class="function"><span class="keyword">function</span>(<span class="params">$scope, $attrs, mySharedService</span>) </span>&#123;</div><div class="line">            $scope.$on(<span class="string">'handleBroadcast'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                $scope.message = <span class="string">'Directive: '</span> + mySharedService.message;</div><div class="line">            &#125;);</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">replace</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">template</span>: <span class="string">'&lt;input&gt;'</span></div><div class="line">    &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>然后，你可以使用这个自定义的directive来使用：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;my-component ng-model=<span class="string">"message"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<p>使用一系列的组件来创建你自己的应用将会让你更方便的添加，删除和更新功能。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结:"></a>小结:</h2><p>个人推荐一个学习angular.js的网站<a href="http://www.apjs.net/" target="_blank" rel="external">http://www.apjs.net/</a></p>
]]></content>
    
    <summary type="html">
    
      本文主要介绍了AngularJS的几种特性
    
    </summary>
    
      <category term="AngularJS" scheme="http://yoursite.com/categories/AngularJS/"/>
    
    
      <category term="angularjs" scheme="http://yoursite.com/tags/angularjs/"/>
    
      <category term="前端框架" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
      <category term="AngularJS特性" scheme="http://yoursite.com/tags/AngularJS%E7%89%B9%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>angularjs(一)</title>
    <link href="http://yoursite.com/2017/04/25/angular-1/"/>
    <id>http://yoursite.com/2017/04/25/angular-1/</id>
    <published>2017-04-25T05:17:02.000Z</published>
    <updated>2017-05-14T14:15:33.125Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h1 id="正文开始"><a href="#正文开始" class="headerlink" title="正文开始"></a>正文开始</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言 "></a><center style="font-size: 30px">1.前言 </center></h2><p>&#160; &#160; &#160; &#160;前端技术的发展是如此之快，各种优秀技术、优秀框架的出现简直让人目不暇接，紧跟时代潮流，学习掌握新知识自然是不敢怠慢。</p>
<p>&#160; &#160; &#160; &#160;<code>AngularJS</code>是google在维护，其在国外已经十分火热，可是国内的使用情况却有不小的差距，参考文献/网络文章也很匮乏。这里便将我学习AngularJS写成文档，一方面作为自己学习路程上的记录，另一方面也给有兴趣的同学一些参考。</p>
<p>&#160; &#160; &#160; &#160;首先我自己也是一名学习者，会以学习者的角度来整理我的行文思路，这里可能只是些探索，有理解或是技术上的错误还请大家指出；其次我特别喜欢编写小例子来把一件事情说明白，故在文中会尽可能多的用示例加代码讲解，我相信这会是一种比较好的方式；最后，我深知AngularJS的使用方式跟<code>jQuery</code>的使用方式有很大不同，在大家都有jquery、ext经验的条件下对于angular的学习会困难重重，不过我更相信在大家的坚持下，能够快速的学好AngularJS，至少咱也能深入了解到AngularJS的基本思想，对咱们以后自己的插件开发、项目开发都会有很大的启示。</p>
<h2 id="2-AngularJS概述"><a href="#2-AngularJS概述" class="headerlink" title="2 AngularJS概述 "></a><center style="font-size: 30px">2 AngularJS概述 </center></h2><h2 id="2-1-AngularJS是什么？"><a href="#2-1-AngularJS是什么？" class="headerlink" title="2.1 AngularJS是什么？"></a>2.1 AngularJS是什么？</h2><p>&#160; &#160; &#160; &#160;AngularJs（后面就简称ng了）是一个用于设计动态web应用的结构框架。首先，它是一个框架，不是类库，是像EXT一样提供一整套方案用于设计web应用。它不仅仅是一个<code>JavaScript</code>框架，因为它的核心其实是对HTML标签的增强。</p>
<p>&#160; &#160; &#160; &#160;何为HTML标签增强？其实就是使你能够用标签完成一部分页面逻辑，具体方式就是通过自定义标签、自定义属性等，这些HTML原生没有的标签/属性在ng中有一个名字：指令（directive）。后面会详细介绍。那么，什么又是动态web应用呢？与传统web系统相区别，web应用能为用户提供丰富的操作，能够随用户操作不断更新视图而不进行url跳转。ng官方也声明它更适用于开发CRUD应用，即数据操作比较多的应用，而非是游戏或图像处理类应用。</p>
<p>&#160; &#160; &#160; &#160;为了实现这些，ng引入了一些非常棒的特性，包括模板机制、数据绑定、模块、指令、依赖注入、路由。通过数据与模板的绑定，能够让我们摆脱繁琐的DOM操作，而将注意力集中在业务逻辑上。</p>
<p>&#160; &#160; &#160; &#160;另外一个疑问，ng是MVC框架吗？还是MVVM框架？官网有提到ng的设计采用了MVC的基本思想，而又不完全是MVC，因为在书写代码时我们确实是在用ng-controller这个指令(起码从名字上看，是MVC吧)，但这个controller处理的业务基本上都是与view进行交互，这么看来又很接近MVVM。让我们把目光移到官网那个非醒目的title上：“AngularJS — Superheroic JavaScript MVW Framework”。</p>
<h2 id="2-2-AngularJS简单介绍"><a href="#2-2-AngularJS简单介绍" class="headerlink" title="2.2 AngularJS简单介绍"></a>2.2 AngularJS简单介绍</h2><p>&#160; &#160; &#160; &#160;AngularJS 重新定义了前端应用的开发方式。面对HTML和JavaScript之间的界线，它<br>非但不畏缩不前，反而正面出击，提出了有效的解决方案。</p>
<p>&#160; &#160; &#160; &#160;很多前端应用的开发框架，比如Backbone、EmberJS等，都要求开发者继承此框架特有的一些JavaScript对象。这种方式有其长处，但它不必要地污染了开发者自己代码的对象空间，还要求开发者去了解内存里那些抽象对象。尽管如此我们还是接受了这种方式，因为网络最初的设计无法提供 我们今天所需的交互性，于是我们需要框架，来帮我们填补JavaScript和HTML之间的鸿沟。而且有了它，你不用再“直接”操控DOM，只要给你的DOM注上metadata（即AngularJS里的directive们），然后让AngularJS来帮你操纵DOM。同时，AngularJS不依赖（也不妨碍）任何其他的框架。你甚至可以基于其它的框架来开发AngularJS应用。<br>API地址：<a href="http://docs.angularjs.org/api/；" target="_blank" rel="external">http://docs.angularjs.org/api/；</a><br>AngularJS在github上的中文粗译版地址：<a href="https://github.com/basestyle/angularjs-cn。" target="_blank" rel="external">https://github.com/basestyle/angularjs-cn。</a></p>
<h2 id="2-3-什么时候该用AngularJS"><a href="#2-3-什么时候该用AngularJS" class="headerlink" title="2.3 什么时候该用AngularJS"></a>2.3 什么时候该用AngularJS</h2><p>&#160; &#160; &#160; &#160;AngularJS是一个 MV* 框架，最适于开发客户端的单页面应用。它不是个功能库，而是用来开发动态网页的框架。它专注于扩展HTML的功能，提供动态数据绑定（data binding），而且它能跟其它框架（如jQuery）合作融洽。</p>
<p>&#160; &#160; &#160; &#160;如果你要开发的是单页应用，AngularJS就是你的上上之选。Gmail、Google Docs、Twitter和Facebook这样的应用，都很能发挥AngularJS的长处。但是像游戏开发之类对DOM进行大量操纵、又或者单纯需要 极高运行速度的应用，就不是AngularJS的用武之地了。</p>
]]></content>
    
    <summary type="html">
    
      本文主要介绍了AngularJS是什么？什么时候该用AngularJS？
    
    </summary>
    
      <category term="AngularJS" scheme="http://yoursite.com/categories/AngularJS/"/>
    
    
      <category term="angularjs" scheme="http://yoursite.com/tags/angularjs/"/>
    
      <category term="前端框架" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
      <category term="angular介绍" scheme="http://yoursite.com/tags/angular%E4%BB%8B%E7%BB%8D/"/>
    
  </entry>
  
  <entry>
    <title>angularjs(三)</title>
    <link href="http://yoursite.com/2017/04/25/angular-3/"/>
    <id>http://yoursite.com/2017/04/25/angular-3/</id>
    <published>2017-04-25T05:17:02.000Z</published>
    <updated>2017-05-14T14:15:26.117Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正文开始"><a href="#正文开始" class="headerlink" title="正文开始"></a>正文开始</h1><p><center style="font-size: 30px"><code>功能介绍</code></center></p>
<hr>
<h2 id="1-数据绑定"><a href="#1-数据绑定" class="headerlink" title="1.数据绑定"></a>1.数据绑定</h2><p>&#160; &#160; &#160; &#160;AngularJS的双向数据绑定，意味着你可以在<code>Mode(JS)</code>中改变数据，而这些变动立刻就会自动出现在<code>View</code>上，<code>反之亦然</code>。即：一方面可以做到model变化驱动了DOM中元素变化，另一方面也可以做到DOM元素的变化也会影响到Model。<br>&#160; &#160; &#160; &#160;在我们使用jQuery的时候，代码中会大量充斥类似这样的语句：var val = $(‘#id’).val(); $(‘#id’).html(str);等等，即频繁的DOM操作（读取和写入），其实我们的最终目的并不是要操作DOM，而是要实现业务逻辑。ng的绑定将让你摆脱DOM操作，只要模板与数据通过声明进行了绑定，两者将随时保持同步，最新的数据会实时显示在页面中，页面中用户修改的数据也会实时被记录在数据模型中。<br><strong>从View到Controller再到View的数据交互（例01）：</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;html ng-app=<span class="string">"demoApp"</span>&gt;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input type=<span class="string">"text"</span> ng-model=<span class="string">"user.name"</span> placeholder=<span class="string">"请输入名称"</span>/&gt;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hello, &#123;&#123; user.name &#125;&#125;！</div></pre></td></tr></table></figure>
<p><code>关键</code>： ng-app 、 ng-model 和 { {user.name } }<br><code>首先</code>： <html>元素的ng-app属性。标识这个DOM里面的内容将启用AngularJS应用。<br><code>其次</code>：告诉AngularJS，对页面上的“user.name” 这个Model进行双向数据绑定。<br><code>第三</code>：告诉AngularJS，在“”这个指令模版上显示“user.name”这个Model的数据。<br><strong>从Server到Controller再到View的数据交互（例02）：</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">ng-app</span>=<span class="string">"demoApp"</span>&gt;</span></div></pre></td></tr></table></figure></html></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>  <span class="attr">ng-controller</span>=<span class="string">"demoController"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"user.name"</span> <span class="attr">disabled</span>=<span class="string">"disabled"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">rel</span>=<span class="string">"nofollow"</span>&gt;</span>获取名字<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">demoApp.controller(<span class="string">"demoController"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$http, $scope</span>)</span>&#123;</div><div class="line">$scope. getAjaxUser = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="comment">// $http.get(&#123;url:"../xxx.action"&#125;).success(function(data)&#123;</span></div><div class="line"><span class="comment">// $scope.user= data;</span></div><div class="line"><span class="comment">// &#125;);</span></div><div class="line">$scope.user = &#123;<span class="string">"name"</span>:<span class="string">"从JOSN中获取的名称"</span>,<span class="string">"age"</span>:<span class="number">22</span>&#125;;</div><div class="line">&#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>改变$scope中的user，View也会自动更新。</p>
<h2 id="2-scopes、module、controller"><a href="#2-scopes、module、controller" class="headerlink" title="2.scopes、module、controller"></a>2.scopes、module、controller</h2><h3 id="2-1-scopes"><a href="#2-1-scopes" class="headerlink" title="2.1 scopes"></a>2.1 scopes</h3><p>&#160; &#160; &#160; &#160;$scope是一个把view（一个DOM元素）连结到controller上的对象。在我们的MVC结构里，这个 $scope 将成为model，它提供一个绑定到DOM元素（以及其子元素）上的excecution context。</p>
<p>&#160; &#160; &#160; &#160;尽管听起来有点复杂，但 $scope 实际上就是一个JavaScript对象，controller和view都可以访问它，所以我们可以利用它在两者间传递信息。在这个 $scope 对象里，我们既存储数据，又存储将要运行在view上的函数。</p>
<p>&#160; &#160; &#160; &#160;每一个Angular应用都会有一个 $rootScope。这个 $rootScope 是最顶级的scope，它对应着含有 ng-app 指令属性的那个DOM元素。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app.run(<span class="function"><span class="keyword">function</span>(<span class="params">$rootScope</span>) </span>&#123; $rootScope.name = <span class="string">"张三"</span>; &#125;);</div></pre></td></tr></table></figure></p>
<p>&#160; &#160; &#160; &#160;如果页面上没有明确设定 $scope ，Angular 就会把数据和函数都绑定到这里， 第一部分中的例子就是靠这一点成功运行的。<br>&#160; &#160; &#160; &#160;这样，我们就可以在view的任何地方访问这个name属性，使用模版表达式，像这样：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123;name&#125;&#125;</div></pre></td></tr></table></figure></p>
<h3 id="2-2-module"><a href="#2-2-module" class="headerlink" title="2.2 module"></a>2.2 module</h3><p>&#160; &#160; &#160; &#160;首先需要明确一下模板的概念。在我还不知道有模板这个东西的时候，曾经用js拼接出很长的HTML字符串，然后append到页面中，这种方式想想真是又土又笨。后来又看到可以把HTML代码包裹在一个&lt;script&gt;标签中当作模板，然后按需要取来使用。<br>&#160; &#160; &#160; &#160;在ng中，模板十分简单，它就是我们页面上的HTML代码，不需要附加任何额外的东西。在模板中可以使用各种指令来增强它的功能，这些指令可以让你把模板和数据巧妙的绑定起来。<br>在&lt;html&gt;标签上多了一个属性ng-app=”MyApp”，它的作用就是用来指定ng的作用域是在&lt;html&gt;标签以内部分。在js中，我们调用angular对象的module方法来声明一个模块，模块的名字和ng-app的值对应。这样声明一下就可以让ng运行起来了。<br>示例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">ng-app</span>=<span class="string">"demoApp"</span>&gt;</span></div><div class="line">var demoApp = angular.module('demoApp', []);</div></pre></td></tr></table></figure></p>
<h3 id="2-3-ng-controller"><a href="#2-3-ng-controller" class="headerlink" title="2.3 ng-controller"></a>2.3 ng-controller</h3><p>&#160; &#160; &#160; &#160;要明确创建一个$scope 对象，我们就要给DOM元素安上一个<code>controlle</code>r对象，使用的是ng-controller 指令属性：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"MyController"</span>&gt;</span> &#123;&#123; person.name &#125;&#125; <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>&#160; &#160; &#160; &#160;ng-controller指令给所在的DOM元素创建了一个新的$scope 对象，并将这个$scope 对象包含进外层DOM元素的$scope 对象里。在上面的例子里，这个外层DOM元素的$scope 对象，就是$rootScope 对象。这个scope链是这样的：</p>
<p>&#160; &#160; &#160; &#160;所有scope都遵循原型继承（prototypal inheritance），这意味着它们都能访问父scope们。对任何属性和方法，如果AngularJS在当前scope上找不到，就会到父 scope上去找，如果在父scope上也没找到，就会继续向上回溯，一直到$rootScope 上。即如果controller是多层嵌套的，就会从最里面一直往外找，这个scope链是这样的：</p>
<p>&#160; &#160; &#160; &#160;唯一的例外：有些指令属性可以选择性地创建一个独立的scope，让这个scope不继承它的父scope们，这个会在指令详解中说明。</p>
<h3 id="4-3-ajax"><a href="#4-3-ajax" class="headerlink" title="4.3 ajax"></a>4.3 ajax</h3><p>&#160; &#160; &#160; &#160;$http 服务是AngularJS的核心服务之一，它帮助我们通过XMLHttpRequest对象或JSONP与远程HTTP服务进行交流。<br>&#160; &#160; &#160; &#160;$http 服务是这样一个函数：它接受一个设置对象，其中指定了如何创建HTTP请求；它将返回一个承诺（*参考JavaScript异步编程的promise模式），其中提供两个方法： s<code>uccess</code>方法和<code>error</code>方法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">demoApp.controller(<span class="string">"demoController"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$http, $scope</span>)</span>&#123;</div><div class="line">$scope. getAjaxUser = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">$http.get(&#123;<span class="attr">url</span>:<span class="string">"../xxx.action"</span>&#125;).success(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">alert(data);</div><div class="line">&#125;).error(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">Alert(“出错了！”);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">&#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>AngularJS的AJAX与jquery等框架的AJAX基本一致，这里就不多说了。</p>
<h3 id="4-4表达式"><a href="#4-4表达式" class="headerlink" title="4.4表达式"></a>4.4表达式</h3><p>&#160; &#160; &#160; &#160;ng中的表达式与javascript表达式类似但是不可以划等号，它是ng自己定义的一套模式。表达式可以作为指令的值，如<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ng-modle=<span class="string">"people.name"</span>、ng-click=<span class="string">"showMe()"</span></div></pre></td></tr></table></figure></p>
<p> ，看起来是如此像字符串，故而也叫字符串表达式。也可以在标记中使用表达式，如<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123;<span class="number">1</span>+<span class="number">2</span>&#125;&#125;</div></pre></td></tr></table></figure></p>
<p> ，或者与过滤器一起使用<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123;<span class="number">1</span>+<span class="number">2</span> | currency&#125;&#125;</div></pre></td></tr></table></figure></p>
<p> 。在框架内部，字符串不会简单的使用<code>eval()</code>来执行，而是有一个专门的$parse服务来处理。在ng表达式中不可以使用循环语句、判断语句，事实上在模板中使用复杂的表达式也是一个不推荐的做法，这样视图与逻辑就混杂在一起了<br>我们在使用其他模板库时，一般都会有模板的循环输出、分支输出、逻辑判断等类似的控制。<br>要想理解指令属性的运作，我们必须先理解表达式。在之前的例子里我们已经见过表达式，例如<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; user.name &#125;&#125;</div></pre></td></tr></table></figure></p>
<p>请查看例03、例04、例05。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; <span class="number">8</span> + <span class="number">1</span> &#125;&#125; <span class="number">9</span></div><div class="line">&#123;&#123; person &#125;&#125; &#123;<span class="string">"name"</span>:<span class="string">"Ari Lerner"</span>&#125;</div><div class="line">&#123;&#123; <span class="number">10</span> * <span class="number">3.3</span> | currency &#125;&#125; $<span class="number">33.00</span></div></pre></td></tr></table></figure></p>
<p>表达式粗略来看有点像 eval(javascript) 的结果。它们会经过Angular.js的处理，从而拥有以下重要而<code>独特</code>的性质：<br><code>1</code> 所有表达式都在scope这个context里被执行，因此可以使用所有本地 $scope 中的变量。<br><code>2</code> 如果一个表达式的执行导致类型错误或引用错误，这些错误将不会被抛出。<br><code>3</code> 表达式里不允许任何控制函数流程的功能（如if/else等条件语句）<br><code>4</code> 表达式可接受一个或多个串联起来的过滤器。</p>
]]></content>
    
    <summary type="html">
    
      本文主要介绍了AngularJS的数据绑定、scopes、module、controller、ajax、表达式
    
    </summary>
    
      <category term="AngularJS" scheme="http://yoursite.com/categories/AngularJS/"/>
    
    
      <category term="angularjs" scheme="http://yoursite.com/tags/angularjs/"/>
    
      <category term="前端框架" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 面向对象编程（一）：封装</title>
    <link href="http://yoursite.com/2017/04/25/mxdx/"/>
    <id>http://yoursite.com/2017/04/25/mxdx/</id>
    <published>2017-04-25T05:17:02.000Z</published>
    <updated>2017-06-04T01:20:24.205Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h1 id="正文开始"><a href="#正文开始" class="headerlink" title="正文开始"></a>正文开始</h1><p><center style="font-size: 30px"><code>封装</code></center></p>
<hr>
<h3 id="服务介绍"><a href="#服务介绍" class="headerlink" title="服务介绍"></a>服务介绍</h3><p>&#160; &#160; &#160; &#160;服务这个概念其实并不陌生，在其他语言中如Java便有这样的概念，其作用就是对外提供某个特定的功能，如消息服务，文件压缩服务等，是一个独立的模块。ng的服务是这样定义的：</p>
]]></content>
    
    <summary type="html">
    
      Javascript 面向对象编程（一）：封装
    
    </summary>
    
      <category term="面向对象" scheme="http://yoursite.com/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
      <category term="面向对象" scheme="http://yoursite.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Vue(入门及简介)</title>
    <link href="http://yoursite.com/2017/04/25/vue%E5%85%A5%E9%97%A8%E7%AE%80%E4%BB%8B/"/>
    <id>http://yoursite.com/2017/04/25/vue入门简介/</id>
    <published>2017-04-25T05:17:02.000Z</published>
    <updated>2017-06-23T10:18:38.594Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h1 id="正文开始"><a href="#正文开始" class="headerlink" title="正文开始"></a>正文开始</h1><p><center style="font-size: 30px"><code>Vue简介及入门</code></center></p>
<hr>
<h1 id="Vue入门之概念及Helloworld"><a href="#Vue入门之概念及Helloworld" class="headerlink" title="Vue入门之概念及Helloworld"></a>Vue入门之概念及Helloworld</h1><h2 id="Vue简介"><a href="#Vue简介" class="headerlink" title="Vue简介"></a>Vue简介</h2><p><code>Vue</code>是一个前端的双向绑定类的框架，发音[读音 /vjuː/, 类似于 view]。新的Vue版本参考了React的部分设计，当然也有自己独特的地方，比如Vue的单文件组件开发方式都很有创新，另外Vue自身的一些绑定的语法、用法等都非常精炼，很容易上手，而且第三方的插件都非常丰富，社区非常活跃，最新的文档都有中文版本。而且Vue配合官方的和第三方的库可以实现单文件的组件化开发、SPA等现代化前端开发。<br>详情请参考<a href="https://cn.vuejs.org/" target="_blank" rel="external">Vue官网</a></p>
<h2 id="Vue的入门demo"><a href="#Vue的入门demo" class="headerlink" title="Vue的入门demo"></a>Vue的入门demo</h2><p><code>Vue</code> 可以直接把它当做一个js库使用，所以它可以很容易的接入到你的项目或者单个页面中。甚至你可以只使用它的双向绑定功能。所以它很容易上手。</p>
<p>比如：我们有一个需求，一个网页上一个Div标签，我们有一个json对象存储数据，把json对象上的数据放到Div上去。</p>
<p>接下来是步骤：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">第一步： 创建一个文件夹并创建一个html文件 比如：index.html.</div><div class="line">当如你可以选择你自己的编辑器，我就用VSCode。</div><div class="line"></div><div class="line">第二步：引入Vue库</div><div class="line">&lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</div><div class="line">当然了你可以直接下载Vue的js文件，推荐你直接用上面的cdn即可。</div><div class="line"></div><div class="line">第三步：创建一个Div，给它一个id，比如：app</div><div class="line"></div><div class="line">第四步：创建Vue的对象，并把数据绑定到上面创建好的div上去。</div></pre></td></tr></table></figure></p>
<p>最终的代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span> <span class="comment">&lt;!--第一步：创建文件夹及html文件--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue入门之Helloworld<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!--第二步：引入Vue库--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!--第三步:创建一个Div--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--Vue的模板的绑定数据的方法， 类似于很多其他前端的模板，可以用两对花括号进行绑定Vue中的数据对象的属性 --&gt;</span></div><div class="line">    &#123;&#123; message &#125;&#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!--第四步：创建Vue的对象，并把数据绑定到上面创建好的div上去。--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;         <span class="comment">// 创建Vue对象。Vue的核心对象。</span></div><div class="line">      el: <span class="string">'#app'</span>,               <span class="comment">// el属性：把当前Vue对象挂载到 div标签上，#app是id选择器</span></div><div class="line">      data: &#123;                   <span class="comment">// data: 是Vue对象中绑定的数据</span></div><div class="line">        message: <span class="string">'Hello Vue!'</span>   <span class="comment">// message 自定义的数据</span></div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>最终的结果就是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hello Vue!</div></pre></td></tr></table></figure></p>
<h2 id="Vue的Helloworld总结"><a href="#Vue的Helloworld总结" class="headerlink" title="Vue的Helloworld总结"></a>Vue的Helloworld总结</h2><ul>
<li>Vue构造函数的：选项el属性，就是element缩写，当前Vue对象挂载到哪个标签上的语法，支持CSS选择器或者dom对象，一般用id选择器选择当前页面的标签。</li>
<li>Vue的选项：data属性是自定义数据。这里我们只是演示了一个message属性，vue会把自定义的数据可以与html的模板数据进行绑定。</li>
<li>Vue 数据绑定的方式就是用&#123;&#123;  &#125;&#125;，类似于handlebars.</li>
<li>上面这个demo就是演示了Vue的绑定数据的基本模型。注意点，标签先创建好了之后，再创建Vue对象，具体你应该懂吧。</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://orzuutv5f.bkt.clouddn.com/01vue-helloworld.png" alt="helloworld" title="">
                </div>
                <div class="image-caption">helloworld</div>
            </figure>]]></content>
    
    <summary type="html">
    
      本文主要介绍了Vue的入门及简单介绍
    
    </summary>
    
      <category term="VueJS" scheme="http://yoursite.com/categories/VueJS/"/>
    
    
      <category term="前端框架" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Vuejs" scheme="http://yoursite.com/tags/Vuejs/"/>
    
      <category term="Vue的入门简介" scheme="http://yoursite.com/tags/Vue%E7%9A%84%E5%85%A5%E9%97%A8%E7%AE%80%E4%BB%8B/"/>
    
  </entry>
  
  <entry>
    <title>js对象的原型与继承方式</title>
    <link href="http://yoursite.com/2017/04/23/jc/"/>
    <id>http://yoursite.com/2017/04/23/jc/</id>
    <published>2017-04-23T13:04:04.000Z</published>
    <updated>2017-05-14T14:13:57.279Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="js对象的原型："><a href="#js对象的原型：" class="headerlink" title="js对象的原型："></a>js对象的原型：</h2><ol>
<li><p>原型：就是指函数的prototype属性所引用的 对象</p>
</li>
<li><p>原型的作用：实现数据的共享</p>
</li>
<li><p>本质：原型 就是 对象；当创建函数时，就已经创建原型–js解析器创建的默认原型，会给默认原型添加一个constructor属性，该属性指回函数。</p>
</li>
<li><p>如果手动替换掉了默认的原型，那么constructor属性会丢失。此时，若该属性具有一定的开发意义，就将其手动添加上，并且给其正确的指向。</p>
</li>
<li><p>继承的概念<br> 就是指对象有权去访问另一个对象上的属性和方法。</p>
</li>
<li><p>继承的实现<br> 继承的基本实现：让一个对象 能 直接访问到另一个对象上的成员</p>
</li>
<li><p>继承实现方式</p>
<ul>
<li><p>原型式：a: 在默认原型上 去添加 想要访问的属性和要调用的方法；<br>b: 将默认的原型替换掉。然后原型变成一个新的对象，之后创建的对象，就继承自新的原型。</p>
</li>
<li><p>混入式：从jQuery的extend方法里总结的一种继承实现</p>
</li>
</ul>
</li>
</ol>
<h2 id="混入式继承"><a href="#混入式继承" class="headerlink" title="混入式继承"></a>混入式继承</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在ES6，Object.assign()</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params"> target </span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> args = <span class="built_in">arguments</span>,</div><div class="line">            i = <span class="number">1</span>,</div><div class="line">            l = args.length,</div><div class="line">            obj;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> k;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ( target == <span class="literal">undefined</span> ) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> ( ; i &lt; l; i++ ) &#123;</div><div class="line">        obj = args[ i ];</div><div class="line">        <span class="keyword">for</span> ( k <span class="keyword">in</span> obj ) &#123;</div><div class="line">            <span class="keyword">if</span> ( obj.hasOwnProperty( k ) ) &#123;</div><div class="line">                target[ k ] = obj [ k ];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> target;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>应用场景：</p>
<p>&#160; &#160; &#160; &#160;在实际开发时，如果需要将参数以对象形式出入，并且在实际处理时需要将该对象的属性 在添加给其他对象来存储，那么在此时此景，就可以使用混入式继承来实现。</p>
<p>注意：<strong>虽然混入式继承不能实现代码的复用，但是在特定的情况下可以提高开发效率</strong></p>
<h2 id="ES5提供的方法"><a href="#ES5提供的方法" class="headerlink" title="ES5提供的方法"></a>ES5提供的方法</h2><p>扩展：Object.defineProperty(); Object.defineProperties()</p>
<p>Object.create( parent, [options] );</p>
<p>功能：创建一个对象，并继承自parent参数。<br>可以通过第二个参数，给新对象初始化一些属性和方法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> parent = &#123;</div><div class="line">    <span class="attr">say</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log( <span class="string">'hello, girl. I am '</span> + <span class="keyword">this</span>.name + <span class="string">'. i am '</span> + <span class="keyword">this</span>.age + <span class="string">' years old. make friend, OK?'</span> );</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> child = <span class="built_in">Object</span>.create( parent, &#123;</div><div class="line">    <span class="string">'name'</span>: &#123;</div><div class="line">        <span class="attr">value</span>: <span class="string">'jingjing'</span>,</div><div class="line">        <span class="attr">writable</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">enumerable</span>: <span class="literal">true</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">'age'</span>: &#123;</div><div class="line">        <span class="attr">value</span>: <span class="number">22</span>,</div><div class="line">        <span class="attr">writable</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">enumerable</span>: <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">&#125; );</div><div class="line"></div><div class="line">child.say();</div></pre></td></tr></table></figure>
<p>优点：非常方便的创建了一个对象，并继承了其他对象；</p>
<p>缺点：类型比较弱。</p>
<p>兼容处理：</p>
<ol>
<li><p>创建新对象</p>
</li>
<li><p>新对象的原型 是 方法的parent参数</p>
</li>
<li><p>在兼容处理时，该方法从哪里来的 最终就添加到哪里去</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// &lt;!-- 如果浏览器不支持该方法 --&gt;</span></div><div class="line"><span class="keyword">if</span> ( !<span class="built_in">Object</span>.create )&#123;</div><div class="line">    <span class="built_in">Object</span>.create = <span class="function"><span class="keyword">function</span> (<span class="params"> parent </span>) </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        &#125;</div><div class="line">        parent.constructor = F;</div><div class="line">        F.prototype = parent;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> F();</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      本文主要介绍了js对象原型的概念，和几种常见的继承方式
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="对象原型" scheme="http://yoursite.com/tags/%E5%AF%B9%E8%B1%A1%E5%8E%9F%E5%9E%8B/"/>
    
      <category term="js对象继承方式" scheme="http://yoursite.com/tags/js%E5%AF%B9%E8%B1%A1%E7%BB%A7%E6%89%BF%E6%96%B9%E5%BC%8F/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://yoursite.com/2017/04/22/dv/"/>
    <id>http://yoursite.com/2017/04/22/dv/</id>
    <published>2017-04-22T15:11:12.000Z</published>
    <updated>2017-05-14T14:15:05.723Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h2 id="正则处理"><a href="#正则处理" class="headerlink" title="正则处理"></a>正则处理</h2><p>(正则，就是用来匹配的.)( regular expression)<br>正则是由  正常的匹配字符  与  元字符( 通配符, 或格式化匹配 )  构成的.<br>因此正则表达式学习的就是元字符:</p>
<h3 id="常用元字符"><a href="#常用元字符" class="headerlink" title="常用元字符:"></a>常用元字符:</h3><pre><code>1) 基本元字符: .    []     |      ()
            2) 限定元字符: +   *    ?   {n}   {n,}  {n,m}
            3) 首尾元字符:  ^         $
            4) 简写元字符: \d        \D
                           \w        \W
                           \s        \S
</code></pre><h3 id="贪婪模式"><a href="#贪婪模式" class="headerlink" title="贪婪模式:"></a>贪婪模式:</h3><p>正则默认匹配尽可能匹配到的东西<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&apos;1234567890&apos;</div><div class="line">/\d+\d+\d+/</div></pre></td></tr></table></figure></p>
<p>取消贪婪模式: 在指定的限定元字符后面添加 ? 表示取消该限定元字符的贪婪模式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&apos;1234567890&apos;</div><div class="line">/\d+?\d+\d+/</div></pre></td></tr></table></figure>
<h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p> 分组( group ), 在正则中使用 () 来分组</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">/(\d+)(\d+)(\d+)/</div><div class="line">正则分组有一个规律, 从左往右数左圆括号, 编号从 1 开始,</div><div class="line">每一个与左圆括号结合的右圆括号构成一个区域. 该区域就是指定的组.</div><div class="line"> 1     2    3</div><div class="line">/(\d+)(\d+)(\d+)/</div><div class="line"> 1 2 3      4</div><div class="line">/(a(b(c)d))e(f)/</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">正则中有一个特殊的元字符不参与分组, 就是 (?: )</div><div class="line"> 1     2      3</div><div class="line">/(a(?:b(c)d))e(f)/</div></pre></td></tr></table></figure>
<h2 id="正则常用方法"><a href="#正则常用方法" class="headerlink" title="正则常用方法:"></a>正则常用方法:</h2><p>   正则是为了匹配字符串的, 那么可以匹配就可以提取, 可以提取就可以替换.</p>
<h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><p>语法: 正则表达式.test( 字符串 ) =&gt; boolean<br>验证数据常常被用到.</p>
<h3 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h3><p>提取字符串使用的<br>语法: 正则表达式.exec( 字符串 ) =&gt; Array<br>注意: 数组中的第 0 个元素则为匹配到的结果, 如果没有匹配到结果那么返回 null.<br>默认只匹配提取从左往右找出来的第零个匹配项.</p>
<h3 id="全局模式-g"><a href="#全局模式-g" class="headerlink" title="全局模式 -g"></a>全局模式 -g</h3><p>如果要循环获得一个字符串中某一个匹配的字符串:<br>1) 正则需要开启全局模式( 右边写上 g, 例如 /e/g )<br>2) 依次调用 exec 方法会获得第0次, 第1次, 第2次的匹配结果, 直到找不到为止, 返回 null.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">eg:</div><div class="line">            <span class="keyword">var</span> str = <span class="string">'ab12c12345d1ef123g45h67ijk3456lm89n'</span>;  <span class="comment">// 将所有的数字取出来, 存储到数组中</span></div><div class="line">            <span class="keyword">var</span> rnum = <span class="regexp">/\d+/g</span>;   <span class="comment">// 开启全局模式</span></div><div class="line">            <span class="keyword">var</span> arr = [],        <span class="comment">// 存取到的数字字符串</span></div><div class="line">                m;               <span class="comment">// match</span></div><div class="line">            <span class="keyword">while</span> ( ( m = rnum.exec( str ) ) != <span class="literal">null</span> ) &#123;</div><div class="line">                arr.push( m[ <span class="number">0</span> ] - <span class="number">0</span> );</div><div class="line">            &#125;</div></pre></td></tr></table></figure>
<h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h3><p>语法: 字符串.replace( 正则表达式, ‘字符串’ ) =&gt; 新的字符串</p>
<h4 id="eg-1"><a href="#eg-1" class="headerlink" title="eg:1"></a>eg:1</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="string">'a------------a---a------a-----a--a'</span>.replace( <span class="regexp">/-+/g</span>, <span class="string">'-'</span> );</div><div class="line">=&gt; a-a-a-a-a-a</div></pre></td></tr></table></figure>
<p>正则的 replace 方法中支持 组引用, 和组替换</p>
<h4 id="eg-2"><a href="#eg-2" class="headerlink" title="eg:2"></a>eg:2</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="string">'a123bc'</span>.replace( <span class="regexp">/(\d+)/</span>, <span class="string">'$1'</span> ) =&gt; a123bc</div><div class="line"><span class="string">'a123bc'</span>.replace( <span class="regexp">/(\d+)/</span>, <span class="string">'$1$1'</span> ) =&gt; a123123bc</div></pre></td></tr></table></figure>
<h4 id="eg-3"><a href="#eg-3" class="headerlink" title="eg:3"></a>eg:3</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="string">'2017-4-21'</span>.replace( <span class="regexp">/(\d&#123;4&#125;)-(\d&#123;1,2&#125;)-(\d&#123;1,2&#125;)/</span>, <span class="string">'$1年$2月$3日'</span> )</div></pre></td></tr></table></figure>
<h4 id="eg-4"><a href="#eg-4" class="headerlink" title="eg:4"></a>eg:4</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">/index.php/teacher/<span class="function"><span class="params">list</span> =&gt;</span> teacher-list</div><div class="line"></div><div class="line">/.+\/(.+)\/(.+)/</div><div class="line"></div><div class="line"><span class="string">'/index.php/teacher/list'</span>.replace( <span class="regexp">/.+\/(.+)\/(.+)/</span>, <span class="string">'.$1-$2'</span> )</div></pre></td></tr></table></figure>
<h4 id="replace高级用法"><a href="#replace高级用法" class="headerlink" title="replace高级用法"></a>replace高级用法</h4><p>语法: 字符串.replace( 正则表达式, 回调函数 ) =&gt; 替换后的字符串</p>
<p>在执行的时候, 每次匹配到的结果, 都会将回调函数调用一次, 将回调函数的返回值 替换到 匹配项的位置.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="string">'a123b456c'</span>.replace( <span class="regexp">/\d+/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">'A'</span>; &#125; )</div></pre></td></tr></table></figure>
<p>注意, 每次匹配到结果都会调用一次这个函数, 同时将匹配到的结果( 数组 )作为参数分散的传入到函数中.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">'a123b456c'</span>.replace( <span class="regexp">/\d+/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params"> m </span>) </span>&#123; <span class="keyword">return</span> m; &#125; )</div><div class="line">=&gt; a123b456c</div></pre></td></tr></table></figure></p>
<p>带有回调函数的 replace 可以替代前面的所有 replace 的功能<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> <span class="string">'a------------a---a------a-----a--a'</span>.replace( <span class="regexp">/-+/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">'-'</span>; &#125; );</div><div class="line"></div><div class="line"><span class="string">'2017-4-21'</span>.replace( <span class="regexp">/(\d&#123;4&#125;)-(\d&#123;1,2&#125;)-(\d&#123;1,2&#125;)/</span>, <span class="function"><span class="keyword">function</span> (<span class="params"> _, year, month, day </span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> year + <span class="string">'年'</span> + month + <span class="string">'月'</span> + day + <span class="string">'日'</span>;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure></p>
<h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><p>将驼峰命名规则的字符串, 转换为带有连字符的字符串.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="string">'getElementsByTagName'</span> =&gt; <span class="string">'get-elements-by-tag-name'</span>.</div><div class="line"><span class="comment">//原生的实现方式</span></div><div class="line"><span class="keyword">var</span> c = <span class="string">'??'</span>;</div><div class="line">c.charAt( <span class="number">0</span> ).toUppercase() == c.charAt( <span class="number">0</span> )</div><div class="line"></div><div class="line">c.charCode( <span class="number">0</span> ) 在 <span class="number">65</span> 与 <span class="number">91</span> 之间</div><div class="line"></div><div class="line"><span class="comment">//利用了正则的实现方式</span></div><div class="line">str.replace( <span class="regexp">/([a-z])([A-Z])/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params"> _, a, b </span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> a + <span class="string">'-'</span> + b.toLowerCase();</div><div class="line">&#125;).replace( <span class="regexp">/([a-z])([A-Z])/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params"> _, a, b </span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> a + <span class="string">'-'</span> + b.toLowerCase();</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//反过来, get-elements-by-tag-name =&gt; getElementsByTagName</span></div><div class="line"></div><div class="line">str.replace( <span class="regexp">/(.)-(.)/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params"> _, a, b </span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> a + b.toUpperCase();</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>对于字符串处理来说，学会正则表达在日常开发中能够更快捷的处理各种字符串！</p>
]]></content>
    
    <summary type="html">
    
      本文主要介绍了正则表达式的一些常见好用的方法
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="正则表达式" scheme="http://yoursite.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>模块化开发的介绍与使用</title>
    <link href="http://yoursite.com/2017/04/22/page/"/>
    <id>http://yoursite.com/2017/04/22/page/</id>
    <published>2017-04-22T07:53:54.000Z</published>
    <updated>2017-05-14T14:14:12.744Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文:"></a>正文:</h1><h2 id="模块的概念："><a href="#模块的概念：" class="headerlink" title="模块的概念："></a>模块的概念：</h2><p>所谓的模块, 在泛指的情况下与组件含义相同. 都是指组成一个完整系统一个零件或单体.</p>
<p>&#160; &#160; &#160; &#160;所谓的前端模块化是为了使得前端页面中的内容可以复用( 思想, 将页面看成一个个零件组合而成 )</p>
<h3 id="js-原生不支持模块化-什么意思-："><a href="#js-原生不支持模块化-什么意思-：" class="headerlink" title="js 原生不支持模块化( 什么意思? )："></a>js 原生不支持模块化( 什么意思? )：</h3><p>1.每一个页面模块可以提供独立的 js 代码. 混合到一起后 数据无法共享或容易造成全局污染.</p>
<p>2.每一个 js 为了更好的使用会引入其他的 js. 那么不好统一处理依赖问题.</p>
<p>3.利用组件分解页面以后, 所有的数据是独立的,资源路径不容易统一维护.</p>
<h3 id="因此需要提供一种-js-支持的-组件化方案："><a href="#因此需要提供一种-js-支持的-组件化方案：" class="headerlink" title="因此需要提供一种 js 支持的 组件化方案："></a>因此需要提供一种 js 支持的 组件化方案：</h3><p>nodejs 平台中原生支持了 js 的模块化( CommonJS 规则 )</p>
<p>&#160; &#160; &#160; &#160;在 node 中如果要使用第三方的 js 代码, 就需要使用 require 来加载该代码( 此时与 html 中的 script 标签的功能一样 )</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> code = <span class="built_in">require</span>( <span class="string">'模块的名字'</span> )</div></pre></td></tr></table></figure>
<p>将 node 的模块化思想移植到前端之中( 浏览器中 )</p>
<p>&#160; &#160; &#160; &#160;node 模块资源有一个特点, 就是存储在本地.<br>node 在设计 api 的时候将 大部分 api 都设计成异步的. 但是require 是同步的.</p>
<p>&#160; &#160; &#160; &#160;因此在浏览器中不能使用该规则的. 阻塞, 网络等一些列问题.所以为了解决这一系列的问题，引入了下面几种概念</p>
<h3 id="AMD的概念："><a href="#AMD的概念：" class="headerlink" title="AMD的概念："></a>AMD的概念：</h3><p>引入了一个新的规则 AMD( asynchronous module definition ), 开发了 require.js<br>下载地址：[<a href="https://github.com/requirejs/requirejs" target="_blank" rel="external">https://github.com/requirejs/requirejs</a>]</p>
<p>在 require 很成功情况下, 它的语法有点问题( 提前加载 )<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">define( [ 所有的依赖 ], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"><span class="comment">// 自己的代码</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>特点是在执行自己的代码之前, 所有依赖必须加载完毕</p>
<h3 id="CMD的概念："><a href="#CMD的概念：" class="headerlink" title="CMD的概念："></a>CMD的概念：</h3><p>玉伯提出了按需的加载的思想, 引入了 CMD ( common module definition )规则, 开发了 sea.js<br>下载地址：[<a href="https://github.com/seajs/seajs" target="_blank" rel="external">https://github.com/seajs/seajs</a>]</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">define( <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"><span class="comment">// 要用某一个模块的时候 require( '....' )</span></div><div class="line"><span class="built_in">require</span>.async( ... )</div><div class="line"><span class="comment">// 自己的代码</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>思想就发生了变化<br>编写代码不在统一的写道一个文件中, 而是写道不同的文件中, 称为模块<br>然后再页面中组合成一个完整的代码来使用.</p>
<h2 id="模块的定义与加载"><a href="#模块的定义与加载" class="headerlink" title="模块的定义与加载"></a>模块的定义与加载</h2><h3 id="首先引入require-js"><a href="#首先引入require-js" class="headerlink" title="首先引入require.js"></a>首先引入require.js</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/requirejs/require.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="如何定义模块"><a href="#如何定义模块" class="headerlink" title="如何定义模块"></a>如何定义模块</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">define( <span class="string">'模块名'</span>, [ <span class="string">'依赖模块1'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">  </span>)  </span>&#123;</div><div class="line">    <span class="comment">// 自己的模块</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第一个参数是如果写了称该模块为表示的是匿名模块<br>第二个参数是一个数组, 里面存储路径 )<br>第三个参数是回调函数, 就如果有加载依<br>注意: 一个模块应该定义到一个文件中, 一个文件中只允许有一个模块.</p>
<h3 id="加载模块的语法"><a href="#加载模块的语法" class="headerlink" title="加载模块的语法"></a>加载模块的语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>( [ <span class="string">'模块名'</span> ], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  &#125; )</div></pre></td></tr></table></figure>
<p>&#160; &#160; &#160; &#160;加载模块的时候可以依次加载一个模块, 也可以依次加载多个模块, 使用数组描述即可<br>第二个参数一般不需要, 它表示的是如果模块加载完成以后要立即使用, 则写在函数中.</p>
<h2 id="定义自己的模块和引用"><a href="#定义自己的模块和引用" class="headerlink" title="定义自己的模块和引用"></a>定义自己的模块和引用</h2><h3 id="定义自己的模块"><a href="#定义自己的模块" class="headerlink" title="定义自己的模块"></a>定义自己的模块</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">     define(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'wyx'</span>);</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">'hehe'</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="引入自己的模块"><a href="#引入自己的模块" class="headerlink" title="引入自己的模块"></a>引入自己的模块</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>自定义模块的引入<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"node_modules/requirejs/require.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="comment">//可以引入自己自定义的模块 第二个参数是这个对象的变量</span></div><div class="line">    <span class="built_in">require</span>([<span class="string">'./zdy'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(name);</div><div class="line">    &#125;);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="模块的路径问题"><a href="#模块的路径问题" class="headerlink" title="模块的路径问题"></a>模块的路径问题</h2><h3 id="默认路径："><a href="#默认路径：" class="headerlink" title="默认路径："></a>默认路径：</h3><p>&#160; &#160; &#160; &#160;RequireJS以一个相对于baseUrl的地址来加载所有的代码.页面顶层标签含有一个特殊的属性data-main，require.js使用它来启动脚本加载过程，而baseUrl一般设置到与该属性相一致的目录。下列示例中展示了baseUrl的设置</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;!--This sets the baseUrl to the <span class="string">"scripts"</span> directory, and</div><div class="line">    loads a script that will have a <span class="built_in">module</span> ID <span class="keyword">of</span> <span class="string">'main'</span>--&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">data-main</span>=<span class="string">"scripts/main.js"</span> <span class="attr">src</span>=<span class="string">"scripts/require.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>&#160; &#160; &#160; &#160;baseUrl亦可通过RequireJS config手动设置。如果没有显式指定config及data-main，则默认的baseUrl为包含RequireJS的那个HTML页面的所属目录。</p>
<p>&#160; &#160; &#160; &#160;RequireJS默认假定所有的依赖资源都是js脚本，因此无需在module ID上再加”.js”后缀，RequireJS在进行module ID到path的解析时会自动补上后缀。你可以通过paths config设置一组脚本，这些有助于我们在使用脚本时码更少的字。</p>
<p>&#160; &#160; &#160; &#160;有时候你想避开”baseUrl + paths”的解析过程，而是直接指定加载某一个目录下的脚本。此时可以这样做：如果一个module ID符合下述规则之一，其ID解析会避开常规的”baseUrl + paths”配置，而是直接将其加载为一个相对于当前HTML文档的脚本：</p>
<p>以 “.js” 结束.</p>
<p>以 “/“ 开始.</p>
<p>包含 URL 协议, 如 “http:” or “https:”</p>
<p>&#160; &#160; &#160; &#160;一般来说，最好还是使用baseUrl及”paths” config去设置module ID。它会给你带来额外的灵活性，如便于脚本的重命名、重定位等。 同时，为了避免凌乱的配置，最好不要使用多级嵌套的目录层次来组织代码，而是要么将所有的脚本都放置到baseUrl中.</p>
<h3 id="自定义路径加载"><a href="#自定义路径加载" class="headerlink" title="自定义路径加载"></a>自定义路径加载</h3><h4 id="使用配置项"><a href="#使用配置项" class="headerlink" title="使用配置项"></a>使用配置项</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">  <span class="built_in">require</span>.config(&#123;</div><div class="line">     <span class="attr">baseUrl</span>: <span class="string">'/参考路径'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="配置路径的短名字"><a href="#配置路径的短名字" class="headerlink" title="配置路径的短名字"></a>配置路径的短名字</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>.config(&#123;</div><div class="line">                <span class="attr">baseUrl</span>: <span class="string">'基础路径'</span>,</div><div class="line">                <span class="attr">paths</span>: &#123;</div><div class="line">                    短名字: <span class="string">'长路径'</span></div><div class="line">        &#125;</div><div class="line"> &#125;)</div></pre></td></tr></table></figure>
<h3 id="命名模块的使用"><a href="#命名模块的使用" class="headerlink" title="命名模块的使用"></a>命名模块的使用</h3><p>在定义模块的时候使用语法:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">define( <span class="string">'模块名'</span>, [ 依赖 ], callback )</div></pre></td></tr></table></figure></p>
<p>具名模块, 或命名模块 named module<br>必须配置路径, 在配置短名字的时候必须与模块的名字一样</p>
<h3 id="如何导出依赖问题"><a href="#如何导出依赖问题" class="headerlink" title="如何导出依赖问题"></a>如何导出依赖问题</h3><p>&#160; &#160; &#160; &#160;如果一个代码它依赖于另一个模块, 但是这个代码中没有定义依赖的方式, 那么就使用<br>        添加一个 shim 的属性, 在属性中添加 deps 属性, 该值是一个数组</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">shim: &#123;</div><div class="line">          短名字: &#123;</div><div class="line">          <span class="attr">deps</span>: [ <span class="string">'依赖的模块'</span> ]</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h3 id="非模块的问题"><a href="#非模块的问题" class="headerlink" title="非模块的问题"></a>非模块的问题</h3><p>&#160; &#160; &#160; &#160;如果一个 js 库不是一个模块( 一个单纯的 js 库, 返回一个公共对象, 另一种就是为了完成某一个事情的 js 库, 不返回任何内容, 但是依赖于某一个库 )<br>如果是返回对象的 js 库</p>
<h4 id="使用配置"><a href="#使用配置" class="headerlink" title="使用配置"></a>使用配置</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">shim: &#123;</div><div class="line">        短名字: &#123;</div><div class="line">            <span class="attr">exports</span>: <span class="string">'名字'</span></div><div class="line">         &#125;</div><div class="line">     &#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&#160; &#160; &#160; &#160;写在最后的话，本文没有介绍AMD模式(sea.js)的使用方法，使用方法与require.js的使用方法大致相同<br>，但是sea.js是采用了按需加载的模式(懒加载)，只有在调用时导入模块即可，<br>具体用法如下</p>
<h4 id="引入jquery为例"><a href="#引入jquery为例" class="headerlink" title="引入jquery为例"></a>引入jquery为例</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</div><div class="line">    <span class="comment">//引用jQuery模块</span></div><div class="line">    <span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'jquery'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      本文主要介绍前端模块化思想的产生和基本使用方法
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="前端模块化" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
      <category term="requirejs" scheme="http://yoursite.com/tags/requirejs/"/>
    
      <category term="seajs" scheme="http://yoursite.com/tags/seajs/"/>
    
  </entry>
  
</feed>
